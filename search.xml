<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SMTP 제목 인코딩 오류 Troubleshooting</title>
      <link href="2021/01/13/SMTP-%EC%A0%9C%EB%AA%A9-%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%98%A4%EB%A5%98-Troubleshooting/"/>
      <url>2021/01/13/SMTP-%EC%A0%9C%EB%AA%A9-%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%98%A4%EB%A5%98-Troubleshooting/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><ul><li>유지보수하는 어플리케이션에서 메일서버 API를 사용하고 있었는데 어느날부터 메일 제목이 깨져서 발송되는 문제가 발생했다.<br>이리저리 삽질 끝에 문제를 해결했는데 도움이 될까 남겨본다.</li></ul><h2 id="분석"><a href="#분석" class="headerlink" title="분석"></a>분석</h2><h3 id="1-SMTP-FORMAT"><a href="#1-SMTP-FORMAT" class="headerlink" title="1. SMTP FORMAT"></a>1. SMTP FORMAT</h3><p> 발송된 메일의 제목을 확인해보니 아래와 같이 나왔다<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;?UTF-8?B?7TAGM6Iqk5Yq2OSDHsydvOyeheuLuhC4&#x3D;</span><br></pre></td></tr></table></figure><br>SMTP의 subject format은 다음과 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;?[charset]?[인코딩타입]?[인코딩된 제목]?&#x3D;</span><br></pre></td></tr></table></figure><blockquote><p>왜 디코딩이 안됐을까… 하고 한참 보다가 뒤에 물음표 빠진것 발견 ^^</p></blockquote><h3 id="2-eml-Test"><a href="#2-eml-Test" class="headerlink" title="2. eml Test"></a>2. eml Test</h3><p>왜 빠진걸까?<br><br>일단 eml 파일을 만들어 테스트 해봤다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ImMessage message = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        Session session = Session.getDefaultInstance(props); </span><br><span class="line">        message = <span class="keyword">new</span> ImMessage( session );</span><br><span class="line">        message.setCharset(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        message.setFrom(<span class="string">&quot;&quot;</span>, <span class="string">&quot;timpac61@gmail.com&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        message.setSubjectEncode(<span class="string">&quot;테스트 메일입니다.&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        message.setPriority(<span class="number">3</span>);</span><br><span class="line">        message.setHtml(<span class="string">&quot;테스트&quot;</span>);</span><br><span class="line">        message.setRecipientsEx(javax.mail.Message.RecipientType.TO, <span class="string">&quot;조영덕&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">        message.makeMimeFile(<span class="string">&quot;E:\\test.eml&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만들어진 eml 파일의 결과는 아래와 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">From: &lt;timpac61@gmail.com&gt;</span><br><span class="line">Subject: &#x3D;?UTF-8?B?7YWM7Iqk7Yq4IOuplOydvOyeheuLiOuLpC4&#x3D;</span><br><span class="line">?&#x3D;</span><br><span class="line">Mime-Version: 1.0</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;&quot;UTF-8&quot;</span><br><span class="line">Content-Transfer-Encoding: base64</span><br><span class="line">X-Priority: 3</span><br></pre></td></tr></table></figure><blockquote><p>Subject의 값이 ?(물음표) 앞에서 개행된 것을 확인할 수 있다. 아하~ 그래서 디코딩을 못했구만..<br>근데 어디서 바뀐거지? ㅡ.ㅡ</p></blockquote><h3 id="3-BASE64-Encoding-Test"><a href="#3-BASE64-Encoding-Test" class="headerlink" title="3. BASE64 Encoding Test"></a>3. BASE64 Encoding Test</h3><p> 메일 API lib에서 subject를 만들어주는 부분을 찾아서 테스트 코드로 만들었다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subjectEncodingTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String subject = <span class="string">&quot;테스트 메일입니다.&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = Base64.encodeBase64(subject.getBytes(<span class="string">&quot;UTF-8&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        String sTemp = <span class="keyword">new</span> String(result);</span><br><span class="line">        System.out.println(<span class="string">&quot;base64 encoding: &quot;</span> + sTemp);</span><br><span class="line">        </span><br><span class="line">        String sRet = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String[] arrResult = sTemp.split(<span class="string">&quot;\r\n&quot;</span>);        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrResult.length; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">                sRet = sRet + <span class="string">&quot;\r\n\t=?UTF-8?B?&quot;</span> + arrResult[i] + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sRet = sRet + <span class="string">&quot;=?UTF-8?B?&quot;</span> + arrResult[i] + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line">            </span><br><span class="line">        System.out.println(<span class="string">&quot;subject format : &quot;</span> + sRet);</span><br><span class="line">            </span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대충 제목을 BASE64로 인코딩한후 SMTP foramt에 맞게 만들어주는 코드다.<br>결과는 아래와 같이 나왔다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base64 encoding: 7YWM7Iqk7Yq4IOuplOydvOyeheuLiOuLpC4&#x3D;</span><br><span class="line"></span><br><span class="line">subject format: &#x3D;?UTF-8?B?7YWM7Iqk7Yq4IOuplOydvOyeheuLiOuLpC4&#x3D;</span><br><span class="line">?&#x3D;</span><br></pre></td></tr></table></figure><blockquote><p>역시나 물음표 앞이 개행됨<br>sTemp.split(“\r\n”); 구문 때문에 여기서 문제가 있을거 같다고 예상했으나… 아니였고<br>apache.commons.codec.Base64 클래스에서 인코딩 변환 중 개행문자가 붙어나왔다 Why??<br>우리의 아파치가 그럴 리 없어~ (무한신뢰)</p></blockquote><h3 id="4-Check-Library"><a href="#4-Check-Library" class="headerlink" title="4. Check Library"></a>4. Check Library</h3><p>라이브러리 버전이나 충돌이 의심되어 클래스 로드를 확인해봤다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String path = org.apache.commons.codec.binary.Base64.class.getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class="line">System.out.println(<span class="string">&quot;Base64:&quot;</span> + path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>확인결과 ~~~~~~~<br>두둥~! 아파치 Commons.codec.jar 가 아닌 다른 jar 파일을 로드하고 있는걸 확인했다.<br>결제관련 라이브러리에 포함된 Base64 클래스였다.</p></blockquote><p><img src="/images/catch.jpg" alt="잡았다 요놈"><em>잡았다 요놈~</em></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>해당 결제 라이브러리 패키지에서 apache.commons.codec을 삭제하고 리패키징한 후 배포하니 깔끔하게 해결되었다. ^^</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> SMTP </tag>
            
            <tag> 실무 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Best Practices</title>
      <link href="2021/01/12/Java-Best-Practices/"/>
      <url>2021/01/12/Java-Best-Practices/</url>
      
        <content type="html"><![CDATA[<h2 id="Programing-Principles"><a href="#Programing-Principles" class="headerlink" title="Programing Principles"></a>Programing Principles</h2><ul><li>KISS - “Keep It Simple, Stupid” </li><li>DRY - “Don’t Repeat Yourself”</li><li>YAGNI - “You Ain’t Gonna Need It” - 필요할 때에 구현해라</li><li>Avoid premature optimization - 최적화는 뒤로 미뤄라</li><li>Single responsibility</li><li>Composition over Inheritance - 상속보다는 구성</li><li>Fail fast, fail hard</li></ul><h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><ol><li>technical layers package<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/project</span><br><span class="line">    ├─ controller</span><br><span class="line">    │     ├─ BoardController</span><br><span class="line">    │     ├─ UserController</span><br><span class="line">    │     ├─ ...</span><br><span class="line">    ├─ dao</span><br><span class="line">    │     ├─ BoardDao</span><br><span class="line">    │     ├─ UserDao</span><br><span class="line">    │     ├─ ...</span><br><span class="line">    ├─ service</span><br><span class="line">    │     ├─ BoardService</span><br><span class="line">    │     ├─ UserService</span><br><span class="line">    │     ├─ ...</span><br></pre></td></tr></table></figure></li><li>domain concern package<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/project</span><br><span class="line">    ├─ User</span><br><span class="line">    │     ├─ UserController</span><br><span class="line">    │     ├─ UserService</span><br><span class="line">    │     ├─ UserDao</span><br><span class="line">    ├─ Board</span><br><span class="line">    │     ├─ BoardController</span><br><span class="line">    │     ├─ BoardService</span><br><span class="line">    │     ├─ BoardDao      </span><br></pre></td></tr></table></figure><blockquote><p>개인적으로 기술적 레이어 보단 도메인 개념을 선호함<br></p></blockquote></li></ol><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><ul><li>static 클래스의 인스턴스화를 막아라 -&gt; private constructor</li><li>should be stateless, immutable, not allow subclassing, and thread-safe</li></ul><h3 id="inheritance"><a href="#inheritance" class="headerlink" title="inheritance"></a>inheritance</h3><ul><li><p>상속보다는 구성을 사용하라</p><blockquote><p>effective java의 유명한 hashset.add() 예제가 있음 ㅎㅎ<br><br>상속은 a is b 일때 타입을 강제할 때만 사용하자<br></p></blockquote></li><li><p>Do not expose protected field</p></li><li><p>class 변수에 final를 사용할 수 있다면 하는게 좋다</p></li><li><p>상속할 필요가 없는 class는 final class로 만들어라. 메서드도 마찬가지</p></li><li><p>빈 기본 생성자는 만들지마라 (자바가 알아서 만들어 줌)</p></li></ul><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><ul><li>Do not use the constant interface pattern<blockquote><p>static class를 사용하자</p></blockquote></li><li>Avoid Interface overuse<blockquote><p>확장 가능성이 없는데 interface 만들고, abstract class 만들고 구현체 만드는 것은 오버 엔지니어링</p></blockquote></li><li>interface는 최대한 작게 유지. client는 사용법만 알면됨</li></ul><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><ul><li>가능하면 base class 나 interface 대신에 type inference를 리턴하라<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends MyObject&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) factory.create(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpecialObject</span> <span class="keyword">extends</span> <span class="title">MyObject</span>&lt;<span class="title">SpecialType</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MySpecialObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(Collections.emptyList());   <span class="comment">// This is ugly, as we loose type</span></span><br><span class="line">     <span class="keyword">super</span>(Collections.EMPTY_LIST();    <span class="comment">// This is just dumb</span></span><br><span class="line">     <span class="comment">// But this is beauty</span></span><br><span class="line">     <span class="keyword">super</span>(<span class="keyword">new</span> ArrayList&lt;SpecialType&gt;());    </span><br><span class="line">     <span class="keyword">super</span>(Collections.&lt;SpecialType&gt;emptyList());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>PECS 공식 : Producer-extends, Consumer-super</li></ul><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><ul><li>복구 가능한 예외는 checked Exception을 사용</li></ul><ol><li>BAD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//handle bad string</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//business logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>GOOD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (str != <span class="keyword">null</span>) &amp;&amp; str.matches(<span class="string">&quot;-?\\d++&quot;</span>) ) &#123;</span><br><span class="line">    Integer value = Integer.valueOf(str);</span><br><span class="line">    <span class="comment">//business logic</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//handle bad string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>예외처리는 도메인 레벨에서 하자</li></ul><ol><li>BAD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ps = conn.prepareStatement(<span class="string">&quot;SELECT * from users&quot;</span>);</span><br><span class="line">          rs = ps.executeQuery();</span><br><span class="line">          <span class="comment">//... return result</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">          log.error(<span class="string">&quot;exception~&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//close resource</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>GOOD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ps = conn.prepareStatement(<span class="string">&quot;SELECT * from users&quot;</span>);</span><br><span class="line">          rs = ps.executeQuery();</span><br><span class="line">          <span class="comment">//... return result</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> DataBaseLevelExcpetion(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//close resource</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>로깅은 에러발생 시점이 아니라 예외 핸들링 시점에 해야한다</li><li>Use Standard Exception</li><li>에러 코드 리턴보다 Exception을 사용해라</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="2021/01/11/Hexo/"/>
      <url>2021/01/11/Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Quick-Start"><a href="#Hexo-Quick-Start" class="headerlink" title="Hexo Quick Start"></a>Hexo Quick Start</h1><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li><a href="http://nodejs.org/">Node.js</a></li><li><a href="http://git-scm.com/">Git</a></li><li>Create Github repository [username.github.io]</li></ul><h3 id="1-Install-Hexo"><a href="#1-Install-Hexo" class="headerlink" title="1.Install Hexo"></a>1.Install Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="2-initialize"><a href="#2-initialize" class="headerlink" title="2.initialize"></a>2.initialize</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="3-configuration-config-yml-file"><a href="#3-configuration-config-yml-file" class="headerlink" title="3.configuration _config.yml file"></a>3.configuration _config.yml file</h3><p>more info: <a href="https://hexo.io/docs/configuration">Configuration</a></p><h3 id="4-Create-a-new-post"><a href="#4-Create-a-new-post" class="headerlink" title="4.Create a new post"></a>4.Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="5-Run-server"><a href="#5-Run-server" class="headerlink" title="5.Run server"></a>5.Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ul><li>connect localhost:4000</li></ul><h3 id="6-Generate-static-files-And-Deploy-to-remote-Repository"><a href="#6-Generate-static-files-And-Deploy-to-remote-Repository" class="headerlink" title="6.Generate static files And Deploy to remote Repository"></a>6.Generate static files And Deploy to remote Repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h3><p>if ERROR Deployer not found: git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>_config.yml plugins add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">- hexo-deployer-git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Quick Start </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
