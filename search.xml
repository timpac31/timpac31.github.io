<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML form 입력값 저장하기</title>
      <link href="2023/11/06/HTML-form-%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0/"/>
      <url>2023/11/06/HTML-form-%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="동기"><a href="#동기" class="headerlink" title="동기"></a>동기</h2><p>웹 개발을하면 HTML form에 입력값을 입력하고 테스트하는 경우가 많다.</p><p>입력하고 에러가 나면 디버그하고 다시 입력하고 테스트하는 일의 반복이다.</p><p>문제는 입력값이 많을 경우에 하나하나 입력하기가 매우 귀찮으며, 시간을 많이 소비하게된다.</p><p>나는 이런 경우에 테스트 스크립트를 만들어서 콘솔에 복사해서 붙여넣는 식으로 개발을 했었는데<br>테스트 스크립트를 만드는 것 역시 귀찮게 느껴졌다.</p><p><img src="/images/refer/ganism.jpg" alt="귀차니즘"><em>귀차니즘</em></p><p>자동으로 저장하고 불러오는 방법이 없을까 고민하였고 왠지 localStorage에 FormData를 저장하고 불러오면 되지 않을까 생각이 들어서 급하게 코드를 작성해보았다.</p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(element.type)</span><br><span class="line">        <span class="keyword">return</span> element.type;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(element.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(child <span class="keyword">of</span> element) &#123;</span><br><span class="line">            <span class="keyword">if</span>(child.type) <span class="keyword">return</span> child.type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> saveFormData = <span class="function">(<span class="params">formName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> frm = <span class="built_in">document</span>[formName];</span><br><span class="line">    <span class="keyword">if</span>(!frm) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">`[<span class="subst">$&#123;formName&#125;</span>] form을 찾을 수 없습니다`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> frmData = <span class="keyword">new</span> FormData(frm);</span><br><span class="line">    <span class="keyword">const</span> serialized = <span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>.from(frmData.entries()));</span><br><span class="line">    <span class="built_in">localStorage</span>.setItem(formName, serialized);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loadFormData = <span class="function">(<span class="params">formName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> loadData = <span class="built_in">localStorage</span>.getItem(formName);</span><br><span class="line">    <span class="keyword">if</span>(!loadData) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;등록된 데이터가 없습니다.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> frm = <span class="built_in">document</span>[formName];</span><br><span class="line">    <span class="keyword">const</span> formObj = <span class="built_in">JSON</span>.parse(loadData);</span><br><span class="line">    formObj.forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> element = frm[key];</span><br><span class="line">        <span class="keyword">const</span> type = getType(element);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(type === <span class="string">&#x27;text&#x27;</span> || type === <span class="string">&#x27;radio&#x27;</span> || type === <span class="string">&#x27;select&#x27;</span> || type === <span class="string">&#x27;select-one&#x27;</span>) &#123;</span><br><span class="line">            element.value = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">&#x27;checkbox&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">document</span>.querySelector(<span class="string">`input[name=<span class="subst">$&#123;key&#125;</span>][value=<span class="subst">$&#123;value&#125;</span>]`</span>).checked = <span class="literal">true</span>;</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> removeFormData = <span class="function"><span class="params">formName</span> =&gt;</span> <span class="built_in">localStorage</span>.removeItem(formName);</span><br></pre></td></tr></table></figure><p>간단히 FormData를 serialize한 다음 폼이름으로 localStorage에 저장하고 불러오는 코드다.</p><p>사용법은 다음과 같다.</p><ol><li>콘솔창에 위 코드 복사 붙여넣어 실행</li><li>saveFormData(‘myForm’); //입력값을 넣은 후 호출하면 저장됨</li><li>loadFormData(‘myForm’); //새로고침한 후 호출하면 저장된 값들이 폼에 입력됨</li><li>removeFormData(‘myForm’); //저장된 formdata 삭제</li></ol><p>일단 text, radio, selectbox, checkbox만 했는데 테스트 결과 잘 작동한다.</p><h2 id="크롬-확장프로그램"><a href="#크롬-확장프로그램" class="headerlink" title="크롬 확장프로그램"></a>크롬 확장프로그램</h2><p>위 처럼 사용하려면 계속 소스를 콘솔창에 붙여넣어야하는 불편함이 있다.<br>좀 더 편하게 사용하기 위해 크롬 확장프로그램에 등록하여 사용하는 방법으로 변경하였다.<br>소스 코드와 사용법은 github에 올려놓았다.</p><p><a href="https://github.com/timpac31/formdataSaver">https://github.com/timpac31/formdataSaver</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implementaion Patterns 정리</title>
      <link href="2023/07/24/implementaion-patterns/"/>
      <url>2023/07/24/implementaion-patterns/</url>
      
        <content type="html"><![CDATA[<h1 id="켄트벡의-구현패턴-책-정리"><a href="#켄트벡의-구현패턴-책-정리" class="headerlink" title="켄트벡의 구현패턴 책 정리"></a>켄트벡의 구현패턴 책 정리</h1><h1 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h1><h2 id="1-클래스"><a href="#1-클래스" class="headerlink" title="1. 클래스"></a>1. 클래스</h2><ul><li>함께 사용되는 데이터의 로직을 담고 싶을 때 사용   </li></ul><h3 id="1-1-단순한-상위클래스-이름"><a href="#1-1-단순한-상위클래스-이름" class="headerlink" title="1-1. 단순한 상위클래스 이름"></a>1-1. 단순한 상위클래스 이름</h3><ul><li>클래스 이름을 작성할 때는 간결성과 표현성 사이의 고민하게 된다.</li><li>이런 딜레마에서 벗어나는 방법은 메타포(metphor)를 사용하는 것이다.</li><li>중요한 클래스는 한 단어로 된 이름을 사용하는 것이 좋다.</li></ul><h3 id="1-2-한정적-하위클래스-이름"><a href="#1-2-한정적-하위클래스-이름" class="headerlink" title="1-2. 한정적 하위클래스 이름"></a>1-2. 한정적 하위클래스 이름</h3><ul><li>상위클래스와의 유사점과 차이점을 나타내야한다.</li><li>간결성 보다는 표현성을 택하는편이 낫다.</li><li>하위클래스 자체로 중요한 개념을 나타내는 경우에는 단순한 이름 사용</li><li>클래스의 이름은 코드의 내용을 반영해야 한다.</li></ul><h2 id="2-추상-인터페이스"><a href="#2-추상-인터페이스" class="headerlink" title="2. 추상 인터페이스"></a>2. 추상 인터페이스</h2><ul><li>변화에 유연하게 대응하기 위해 인터페이스로 정의</li><li>유연성에는 비용이 들고, 어떤 부분에서 유연성이 필요한지 에측하기는 어렵기 때문에 미리 오버 엔지니어링할 필요 없이 실제 필요할 때에 유연성을 부여하는게 좋다.</li></ul><h3 id="2-1-인터페이스"><a href="#2-1-인터페이스" class="headerlink" title="2-1. 인터페이스"></a>2-1. 인터페이스</h3><pre><code>- 자바 인터페이스를 사용하는 것은 &quot;여기가지가 내가 원하는 것이고, 이외의 내용은 상관하지 않는다&quot; 라고 이야기하는 것과 같다.- 단순한 상위클래스 이름 : File, 구현클래스(ActualFile, FileImpl)- 구상클래스의 이름이 중요할 때 : IFile</code></pre><h3 id="2-2-추상-클래스"><a href="#2-2-추상-클래스" class="headerlink" title="2-2. 추상 클래스"></a>2-2. 추상 클래스</h3><pre><code>- 추상 인터페이스는 인터페이스 자체를 바꾸는 것이 매우 어렵다. (구현 클래스가 모두 영항을 받음)- 추상 클래스를 사용하면 인터페이스와 실제 구현의 차이를 나타낼 수 있다.- 추상 클래스의 단점은 1개의 상위클래스만 지정할 수 있다는 것.</code></pre><h3 id="2-3-버전-인터페이스"><a href="#2-3-버전-인터페이스" class="headerlink" title="2-3. 버전 인터페이스"></a>2-3. 버전 인터페이스</h3><pre><code>- 인터페이스를 바꾸고 싶지만 바꿀 수 없을 때 사용<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ReversibleCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="3-값-객체"><a href="#3-값-객체" class="headerlink" title="3. 값 객체"></a>3. 값 객체</h2><ul><li>상태값을 가진 객체는 호출 순서가 때로 중요한 인터페이스의 일부가된다. 작은 변화가 예측하기 어려운 문제점을 가져온다.</li><li>값 객체는 immutable(변경 불가능) 해야한다.</li></ul><h2 id="4-특화"><a href="#4-특화" class="headerlink" title="4. 특화"></a>4. 특화</h2><ul><li>연산 간의 유사점과 차이점을 부각시키는 방향으로 코드를 작성하면, 프로그램을 읽고 사용하고 수정하기가 쉬워진다.</li></ul><h3 id="4-1-하위클래스"><a href="#4-1-하위클래스" class="headerlink" title="4-1. 하위클래스"></a>4-1. 하위클래스</h3><pre><code>- 하위클래스를 선언하는 것은 &quot;이 객체는 상위클래스와 같다. 이 부분만 제외하면..&quot;- 분류를 나타내는 것이 아니라 구현을 공유하는 것- 상위클래스의 메소드는 작게 유지하는 것이 좋다.- 변화하는 로직을 나타낼 때는 조건문이나 위임을 사용하라.</code></pre><h3 id="4-2-구현자"><a href="#4-2-구현자" class="headerlink" title="4-2. 구현자"></a>4-2. 구현자</h3><pre><code>- 다형성 메시지는 여라 가지 변형을 수용한다.</code></pre><h3 id="4-3-인스턴스별-행위"><a href="#4-3-인스턴스별-행위" class="headerlink" title="4-3. 인스턴스별 행위"></a>4-3. 인스턴스별 행위</h3><pre><code>- 클래스의 인스턴스는 모두 같은 로직을 공유하지만 연산 도중 로직이 변하게 할 수 있다.이런 경우 코드의 이해가 어려워지므로 인스턴스 생성 후에는 행동을 변화시키지 않는 편이 좋다.    4-3-1. 조건문    - 단순성과 지역성에서 장점이 있지만 광범위하게 사용되는 경우 중복이 생긴다.    4-3-2. 위임    - 분기문는 위임으로 변경할 수 있다.    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(getToll()) &#123;</span><br><span class="line">        <span class="keyword">case</span> SELECTING :</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CREATE_RECTANGLE :</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mosueDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    getTool().mouseDown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    4-3-3. 플러그인 선택자    - 한두개의 메소드에서만 인스턴스별 행동이 필요하고 모든 로직이 하나의 클래스에 들어가도 좋은 경우    - 메소드 이름을 필드에 저장하고 리플렉션을 이용해 호출    4-3-4. 익명 내부클래스    - 지역적으로 한 곳에서만 사용할 때 사용    - 가급적 짧아야한다.4-4. 라이브러리 클래스- 유틸 클래스, 정적메소드로 구현- 남용하면 클래스를 사용한 객체지향의 장점을 잃어버림</code></pre><h1 id="상태"><a href="#상태" class="headerlink" title="상태"></a>상태</h1><h2 id="1-상태"><a href="#1-상태" class="headerlink" title="1. 상태"></a>1. 상태</h2><ul><li>유사한 상태는 묶어서 관리 : 동일한 연산에 사용되는지? 라이프사이클이 같은지? 판단</li></ul><h2 id="2-접근"><a href="#2-접근" class="headerlink" title="2. 접근"></a>2. 접근</h2><ul><li>프로그래밍 언어는 접근과 계산으로 나눌 수 있다.</li><li>접근과 계산을 구별하고 차이점을 효과적으로 전달해야한다.</li></ul><h3 id="2-1-직접-접근"><a href="#2-1-직접-접근" class="headerlink" title="2-1. 직접 접근"></a>2-1. 직접 접근</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span>;</span><br><span class="line">doorRegister = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>- 표현이 명확하다는 장점이 있지만 유연성이 떨어지고, 코드의 의도를 알기 어려움</code></pre><h3 id="2-2-간접-접근"><a href="#2-2-간접-접근" class="headerlink" title="2-2. 간접 접근"></a>2-2. 간접 접근</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openDoor() &#123;</span><br><span class="line">    doorRegister = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 클래스 내부에서는 직접접근, 외부에서는 간접접근을 사용하는게 좋다.</code></pre><h2 id="3-공용-상태"><a href="#3-공용-상태" class="headerlink" title="3. 공용 상태"></a>3. 공용 상태</h2><ul><li>여러 연산에서 같은 데이터를 사용하는 경우 필드에 선언하는 것이 좋다.</li><li>범위와 생명주기가 같아야 한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-가변-상태"><a href="#4-가변-상태" class="headerlink" title="4. 가변 상태"></a>4. 가변 상태</h2><ul><li>맵으로 표현</li><li>각 필드의 상태에 따라 다른 필드를 필요한 경우에만 사용</li></ul><h2 id="5-외재-상태"><a href="#5-외재-상태" class="headerlink" title="5. 외재 상태"></a>5. 외재 상태</h2><ul><li>프로그램 일부에서만 특정 상태를 필요로 하는 경우 필드에 선언하지 말고 객체를 필요로 하는 부문에서 저장하자</li></ul><h2 id="6-변수"><a href="#6-변수" class="headerlink" title="6. 변수"></a>6. 변수</h2><ul><li>변수의 생명주기는 변수의 범위와 가까울수록 좋다.</li></ul><h2 id="7-파라미터"><a href="#7-파라미터" class="headerlink" title="7. 파라미터"></a>7. 파라미터</h2><ul><li>필드 참조보다 약한 의존성</li><li>반복해서 같은 파라미터를 사용한다면 객체 내로 옮기자</li></ul><h2 id="8-수집-파라미터"><a href="#8-수집-파라미터" class="headerlink" title="8. 수집 파라미터"></a>8. 수집 파라미터</h2><ul><li>여러 메소드 호출을 통한 결과를 모으기 위해 결과를 모으는 파라미터를 전달</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="function">List <span class="title">asList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List results = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        addTo(results);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addTo</span><span class="params">(List elements)</span> </span>&#123;</span><br><span class="line">        elements.add(getValue());</span><br><span class="line">        <span class="keyword">for</span>(Node each : getChildren()) </span><br><span class="line">            each.addTo(elements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-옵션-파라미터"><a href="#9-옵션-파라미터" class="headerlink" title="9. 옵션 파라미터"></a>9. 옵션 파라미터</h2><ul><li>필수 파라미터를 앞에, 옵션 파라미터는 뒤에 전달한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span><span class="params">(<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span><span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> backlog)</span></span></span><br></pre></td></tr></table></figure><h2 id="10-파라미터-객체"><a href="#10-파라미터-객체" class="headerlink" title="10. 파라미터 객체"></a>10. 파라미터 객체</h2><ul><li>여러 개의 파라미터가 함께 그룹으로 전달된다면 객체로 변경하는 것을 고려하자</li></ul><h2 id="11-초기화"><a href="#11-초기화" class="headerlink" title="11. 초기화"></a>11. 초기화</h2><ul><li>변수 초기화는 가급적 선언과 함께하는 것이 좋다.</li><li>생성 비용이 크다면 게으른 초기화를 사용하자.</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Quartz Clustering</title>
      <link href="2023/02/17/Quartz-Clustering/"/>
      <url>2023/02/17/Quartz-Clustering/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><p>운영중인 서버에서 스케줄링 작업을 하는게 있었는데 실행이 3번 중복 실행되는 문제가 발생하였다.<br>문자를 발송하는 작업이였는데 3번 발송됨 </p><h2 id="분석"><a href="#분석" class="headerlink" title="분석"></a>분석</h2><p>실행환경은 Spring(4.0.0) + Quartz(1.8.5) 를 사용하고 있었다.<br>기존에 스프링 quartz bean 설정은 다음과 같았다.<br>MethodInvokingJobDetailFactoryBean을 사용하여 스프링 빈의 메소드를 바로 실행시킨다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;smsSendUserCollectRequest&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;targetObject&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;smsSendUserCollectScheduling&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;targetMethod&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smsSendUserCollectCollectMethod&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;concurrent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;smsSendUserCollectRequestTrigger&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobDetail&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;smsSendUserCollectRequest&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cronExpression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0 0 5 * * ?&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;smsSendUserCollectCollectRequestScheduler&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;triggers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;smsSendUserCollectRequestTrigger&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>cron trigger 표현식을 보면 “0 0 5 * * ?” 5시에 한번만 실행되는걸 볼 수 있다.<br>스케줄러 자체 설정엔 문제가 없었지만 중복실행되는 이유는<br>WAS가 이중화되어 있었기 때문이였다. JEUS WAS를 사용하는데 3개의 container로 나뉘어져있었고 3개의 container에서 모두 실행되고 있었던 것이다.</p><p><img src="/images/refer/quartz_cluster.png" alt="quart-clustering"></p><p>다행히 quartz lib에서 clustering을 지원하고 있어서 생각보다 어렵지 않게 문제를 해결할 수 있었다.<br>클러스터링을 적용하려면 스프링쿼츠의 SchedulerFactoryBean 설정을 변경해주어야한다.</p><h2 id="설정-변경"><a href="#설정-변경" class="headerlink" title="설정 변경"></a>설정 변경</h2><ol><li>JobDetailBean로 변경</li></ol><p>기존 설정에서는 org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean을 사용하여 스프링 빈의 메소드를 바로 실행했는데<br>이방식은 클러스터링이되지 않기 때문에 org.springframework.scheduling.quartz.JobDetailBean 방식으로 변경해야했다.<br>JobDetailBean의 JobClass는 QuartzJobBean 클래스를 상속하여 executeInternal 메소드를 오버라이드 해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smsSendUserCollectRequest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">smsSendUserCollectScheduling</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">doTask();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> JobExecutionException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ol start="2"><li>스프링 빈 설정 변경</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;smsSendUserCollectRequest&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.JobDetailBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;io.timpac.smsSendUserCollectScheduling&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;smsSendUserCollectRequestTrigger&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobDetail&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;smsSendUserCollectRequest&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cronExpression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0 0 5 * * ?&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ClusterScheduler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;triggers&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;smsSendUserCollectRequestTrigger&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:quartz.properties&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><br><ol start="3"><li>quartz.properties 속성 설정</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.quartz.jobStore.useProperties</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.class</span>=<span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.driverDelegateClass</span>=<span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.dataSource</span>=<span class="string">dataSource</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.tablePrefix</span>=<span class="string">QRTZ_</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.isClustered</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.clusterCheckinInterval</span>=<span class="string">20000</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.misfireThreshold</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceId</span>=<span class="string">AUTO</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceName</span>=<span class="string">MyClusteredScheduler</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.class</span>=<span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadCount</span>=<span class="string">4</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadPriority</span>=<span class="string">5</span></span><br></pre></td></tr></table></figure><blockquote><p>각 속성의 설정정보는 아래링크 참조<br><a href="http://www.quartz-scheduler.org/documentation/quartz-1.8.6/configuration/ConfigJDBCJobStoreClustering">http://www.quartz-scheduler.org/documentation/quartz-1.8.6/configuration/ConfigJDBCJobStoreClustering</a></p></blockquote><br><ol start="4"><li>database table 생성<br>클러스터링 동기화를 위한 데이터베이스 테이블을 생성해준다.</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_job_details</span><br><span class="line">  (</span><br><span class="line">    JOB_NAME  VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    JOB_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    DESCRIPTION VARCHAR2(<span class="number">250</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    JOB_CLASS_NAME   VARCHAR2(<span class="number">250</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    IS_DURABLE VARCHAR2(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    IS_VOLATILE VARCHAR2(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    IS_STATEFUL VARCHAR2(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    REQUESTS_RECOVERY VARCHAR2(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    JOB_DATA <span class="type">BLOB</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (JOB_NAME,JOB_GROUP)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_job_listeners</span><br><span class="line">  (</span><br><span class="line">    JOB_NAME  VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    JOB_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    JOB_LISTENER VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (JOB_NAME,JOB_GROUP,JOB_LISTENER),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (JOB_NAME,JOB_GROUP) </span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_triggers</span><br><span class="line">  (</span><br><span class="line">    TRIGGER_NAME VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    JOB_NAME  VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    JOB_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    IS_VOLATILE VARCHAR2(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    DESCRIPTION VARCHAR2(<span class="number">250</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    NEXT_FIRE_TIME NUMBER(<span class="number">13</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    PREV_FIRE_TIME NUMBER(<span class="number">13</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    PRIORITY NUMBER(<span class="number">13</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    TRIGGER_STATE VARCHAR2(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TRIGGER_TYPE VARCHAR2(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    START_TIME NUMBER(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    END_TIME NUMBER(<span class="number">13</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    CALENDAR_NAME VARCHAR2(<span class="number">200</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    MISFIRE_INSTR NUMBER(<span class="number">2</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    JOB_DATA <span class="type">BLOB</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (JOB_NAME,JOB_GROUP) </span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP) </span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_simple_triggers</span><br><span class="line">  (</span><br><span class="line">    TRIGGER_NAME VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    REPEAT_COUNT NUMBER(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    REPEAT_INTERVAL NUMBER(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TIMES_TRIGGERED NUMBER(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP) </span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_cron_triggers</span><br><span class="line">  (</span><br><span class="line">    TRIGGER_NAME VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    CRON_EXPRESSION VARCHAR2(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TIME_ZONE_ID VARCHAR2(<span class="number">80</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP) </span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_blob_triggers</span><br><span class="line">  (</span><br><span class="line">    TRIGGER_NAME VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    BLOB_DATA <span class="type">BLOB</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP) </span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_trigger_listeners</span><br><span class="line">  (</span><br><span class="line">    TRIGGER_NAME  VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    TRIGGER_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TRIGGER_LISTENER VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP) </span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_calendars</span><br><span class="line">  (</span><br><span class="line">    CALENDAR_NAME  VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    CALENDAR <span class="type">BLOB</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (CALENDAR_NAME)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_paused_trigger_grps</span><br><span class="line">  (</span><br><span class="line">    TRIGGER_GROUP  VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_fired_triggers </span><br><span class="line">  (</span><br><span class="line">    ENTRY_ID VARCHAR2(<span class="number">95</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TRIGGER_NAME VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    IS_VOLATILE VARCHAR2(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    INSTANCE_NAME VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    FIRED_TIME NUMBER(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    PRIORITY NUMBER(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    STATE VARCHAR2(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    JOB_NAME VARCHAR2(<span class="number">200</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    JOB_GROUP VARCHAR2(<span class="number">200</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    IS_STATEFUL VARCHAR2(<span class="number">1</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    REQUESTS_RECOVERY VARCHAR2(<span class="number">1</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (ENTRY_ID)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_scheduler_state </span><br><span class="line">  (</span><br><span class="line">    INSTANCE_NAME VARCHAR2(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    LAST_CHECKIN_TIME NUMBER(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    CHECKIN_INTERVAL NUMBER(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (INSTANCE_NAME)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qrtz_locks</span><br><span class="line">  (</span><br><span class="line">    LOCK_NAME  VARCHAR2(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (LOCK_NAME)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qrtz_locks <span class="keyword">values</span>(<span class="string">&#x27;TRIGGER_ACCESS&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qrtz_locks <span class="keyword">values</span>(<span class="string">&#x27;JOB_ACCESS&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qrtz_locks <span class="keyword">values</span>(<span class="string">&#x27;CALENDAR_ACCESS&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qrtz_locks <span class="keyword">values</span>(<span class="string">&#x27;STATE_ACCESS&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> qrtz_locks <span class="keyword">values</span>(<span class="string">&#x27;MISFIRE_ACCESS&#x27;</span>);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_j_req_recovery <span class="keyword">on</span> qrtz_job_details(REQUESTS_RECOVERY);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_t_next_fire_time <span class="keyword">on</span> qrtz_triggers(NEXT_FIRE_TIME);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_t_state <span class="keyword">on</span> qrtz_triggers(TRIGGER_STATE);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_t_nft_st <span class="keyword">on</span> qrtz_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_t_volatile <span class="keyword">on</span> qrtz_triggers(IS_VOLATILE);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_ft_trig_name <span class="keyword">on</span> qrtz_fired_triggers(TRIGGER_NAME);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_ft_trig_group <span class="keyword">on</span> qrtz_fired_triggers(TRIGGER_GROUP);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_ft_trig_nm_gp <span class="keyword">on</span> qrtz_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_ft_trig_volatile <span class="keyword">on</span> qrtz_fired_triggers(IS_VOLATILE);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_ft_trig_inst_name <span class="keyword">on</span> qrtz_fired_triggers(INSTANCE_NAME);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_ft_job_name <span class="keyword">on</span> qrtz_fired_triggers(JOB_NAME);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_ft_job_group <span class="keyword">on</span> qrtz_fired_triggers(JOB_GROUP);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_ft_job_stateful <span class="keyword">on</span> qrtz_fired_triggers(IS_STATEFUL);</span><br><span class="line"><span class="keyword">create</span> index idx_qrtz_ft_job_req_recovery <span class="keyword">on</span> qrtz_fired_triggers(REQUESTS_RECOVERY);</span><br></pre></td></tr></table></figure><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p>서버에 적용하고 모니터링 해본 결과 하나의 인스턴스만 실행되는 것을 확인할 수 있었다.<br>분산서버 환경이나 이중화된 WAS환경에서 Quartz를 적용하려면 꼭 클러스터링을 해 주어야 중복실행을 막을 수 있다.</p><h2 id="주의-사항"><a href="#주의-사항" class="headerlink" title="주의 사항"></a>주의 사항</h2><ul><li>설정변경시 qrtz_* 테이블 삭제<br>quartz trigger나 job 설정을 변경할 경우 생성했던 qrtz_* 테이블들의 정보도 지워준 후에 서버를 재시작하는게 깔끔하다.<br>테이블에 trigger나 job 정보들이 남아있어서 중복실행되거나 에러를 발생시키는 경우가 있었다.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_job_listeners;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_trigger_listeners;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_fired_triggers;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_simple_triggers;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_cron_triggers;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_blob_triggers;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_triggers;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_job_details;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_calendars;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_paused_trigger_grps;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> qrtz_scheduler_state;</span><br></pre></td></tr></table></figure><ul><li>Quartz JobClass에서 Spring bean injection<br>실행시킬 Job 클래스에서 @Autowired 등으로 스프링 빈을 주입받아 사용하고 싶을 때가 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smsSendUserCollectRequest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">smsSendUserCollectScheduling</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        smsService.send();  <span class="comment">// NullPointerException 발생!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 사용하니까 NullPointerException이 발생했다.<br>아마도 쿼츠에서는 스프링 빈을 가져오지 않고 프록시 클래스를 사용해 메소드를 호출하기 때문에 의존성 주입이 안된 채로 실행되는게 아닐까 생각한다.<br>나는 메소드안에서 직접 의존성을 주입해주는 방식으로 해결했다.<br>쿼츠 잡클래스에서 빈을 주입받으려면 SchedulerFactoryBean에 applicationContextSchedulerContextKey 설정을 해야한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ClusterScheduler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applicationContextSchedulerContextKey&quot;</span> <span class="attr">value</span>=<span class="string">&quot;applicationContext&quot;</span>/&gt;</span> </span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smsSendUserCollectRequest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">smsSendUserCollectScheduling</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = (ApplicationContext) context.getScheduler().getContext().get(<span class="string">&quot;applicationContext&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.smsService = applicationContext.getBean(SmsService.class);</span><br><span class="line"></span><br><span class="line">        smsService.send(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><a href="http://www.quartz-scheduler.org/documentation/quartz-1.8.6/configuration/ConfigJDBCJobStoreClustering">http://www.quartz-scheduler.org/documentation/quartz-1.8.6/configuration/ConfigJDBCJobStoreClustering</a><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#io.quartz">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#io.quartz</a><br><a href="https://junhyunny.github.io/spring-mvc/quartz-clustering-in-spring-mvc/">https://junhyunny.github.io/spring-mvc/quartz-clustering-in-spring-mvc/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> quartz </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자바 재귀함수 꼬리물기 최적화</title>
      <link href="2022/08/02/%EC%9E%90%EB%B0%94-%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98-%EA%BC%AC%EB%A6%AC%EB%AC%BC%EA%B8%B0-%EC%B5%9C%EC%A0%81%ED%99%94/"/>
      <url>2022/08/02/%EC%9E%90%EB%B0%94-%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98-%EA%BC%AC%EB%A6%AC%EB%AC%BC%EA%B8%B0-%EC%B5%9C%EC%A0%81%ED%99%94/</url>
      
        <content type="html"><![CDATA[<h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><p>아래 예제를 보자. 1부터 N까지 합을 구하는 재귀함수다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n &lt;= <span class="number">1</span> ? n : n + sum(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sum(100); 을 실행하면 결과 값 5050이 잘 리턴된다.</p><p>하지만 큰 숫자를 넣고 실행하면 어떻게 될까?</p><p>sum(100000); 을 실행하면 우리에게 익숙한 StactOverflowError가 발생한다. (컴퓨터마다 한계숫자는 차이가 있음)<br>십만은 컴퓨터에게 그리 큰 숫자가 아닌데 왜 메모리가 모자른걸까?</p><p><img src="/images/refer/stackoverflow.png" alt="StackOverFlow"> <em>개발자라면 모두 아는 사이트</em></p><h2 id="Recursion-And-Stack-in-Java"><a href="#Recursion-And-Stack-in-Java" class="headerlink" title="Recursion And Stack in Java"></a>Recursion And Stack in Java</h2><p>자바는 메소드가 호출될 때 현재 하고 있는 일을 중단하고(suspend) 현재 컨텍스트의 환경을 스택 메모리에 저장(push)한다. </p><p>그리고 메소드가 리턴되었을 때 다시 스택에서 가져와(pop) 실행을 재개한다.(resume)</p><p>위에서 큰 수를 넣었을 때 재귀함수가 반복적으로 호출되면서 스택에 계속 push만 되다보니 메모리 허용치를 넘어서 에러가 나는 것이였다. 스택메모리는 빠르지만 공간은 작다.</p><p>현재 환경을 스택에 저장하는 이유는 메소드 호출 후에 돌아올 지점을 기억하고, 돌아와서 나머지 작업을 재개해야하기 때문이다. 그렇다면 반환 후 나머지 작업을 할 필요가 없을 경우엔 스택에 저장 할 필요가 없다는 것이 아닐까?? </p><p>이처럼 재귀호출 부분을 맨 마지막 꼬리에 위치시키는 방법을 Tail Call Recursion(꼬리물기 재귀) 라고하며.<br>Tail Call Recursion을 했을 때 스택저장을 피하는 것을 TCE(Tail Call Elimination) 또는 TCO(Tail Call Optimization)라고 한다.<br>나머지 작업이 없기 때문에 스택에 저장할 필요가 없어진다.</p><h2 id="Tail-Call-Elimination-꼬리물기-최적화"><a href="#Tail-Call-Elimination-꼬리물기-최적화" class="headerlink" title="Tail Call Elimination (꼬리물기 최적화)"></a>Tail Call Elimination (꼬리물기 최적화)</h2><p>정말 그런지 확인해보자 위의 sum 함수를 Tail Call Recursion으로 만들면 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> acc)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n &lt;= <span class="number">1</span> ? acc : sum(n-<span class="number">1</span>, n+acc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>처음에 나온 sum 함수는 내부에서 sum(n-1)을 호출한 후 + 연산을 재개해야 하기 때문에 Tail Call이 아니다.</p><p>하지만 변경된 위의 예제는 마지막에 호출하고 뒤에 아무일도 하지 않기 때문에 tail call 이라고 할 수 있다.</p><p>변경된 함수로 sum(100000); 을 실행해보자.. 역시나 에러가 나는 것을 볼 수 있다.</p><p>불행히도 자바에서는 TCE가 구현되어 있지 않다. 함수형 언어같은 경우 위처럼 했을 때 최적화가되어 스택메모리에 저장이 안되지만 자바는 여전히 저장된다.</p><h2 id="Tail-Call-Elimination-in-Java"><a href="#Tail-Call-Elimination-in-Java" class="headerlink" title="Tail Call Elimination in Java"></a>Tail Call Elimination in Java</h2><p>자바는 TCE가 지원되지 않지만 비슷하게 구현할 수는 있다.<br>먼저 TailCall 이라는 추상클래스를 만들고 3개의 추상메소드를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TailCall</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> TailCall&lt;T&gt; <span class="title">resume</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">eval</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isSuspend</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TailCall을 상속하는 두개의 클래스 Return, Suspend를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Return</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">TailCall</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Return</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TailCall&lt;T&gt; <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Return has no resume&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Suspend</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">TailCall</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Supplier&lt;TailCall&lt;T&gt;&gt; supplier;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TailCall&lt;T&gt; <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> supplier.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Suspend has no value&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TailCall을 사용하여 sum 함수를 수정하면 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TailCall&lt;Integer&gt; <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> acc)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="keyword">new</span> TailCall.Return&lt;&gt;(acc) : <span class="keyword">new</span> TailCall.Suspend&lt;&gt;(() -&gt; sum(n-<span class="number">1</span>, n + acc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>종료 조건이 되면 결과값을 담은 TailCall.Return 타입을 리턴하고,</p><p>종료 조건이 아니면 TailCall.Suspend 타입을 리턴한다. Suspend를 생성할 때 생성자 인자로 supplier를 받는다. </p><p>sum함수에서의 supplier는 () -&gt; sum(n-1, n + acc) 이다. </p><p>재귀호출을 하는 함수이며 resume() 했을 때 다음에 호출될 TailCall을 가르키게된다. Linked List 구조와 비슷해보인다.</p><p>사용법은 다음과 같다. 큰숫자를 넣고 실행해도 에러없이 잘 동작하는 것을 볼 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TailCall&lt;Integer&gt; tailCall = sum(<span class="number">100000</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(tailCall.isSuspend()) &#123;</span><br><span class="line">tailCall = tailCall.resume();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(tailCall.eval());</span><br></pre></td></tr></table></figure><p>TailCall<Integer> tailCall = sum(100000, 1); 을 실행해도 재귀적으로 함수를 바로 호출하지 않기 때문에 스택메모리가 쌓이지 않는다. 함수 호출 부분을 supplier로 선언하여 지연평가를 하기 때문이다.</p><p>tailCall.resume(); 을 했을 때 비로소 평가되며 다음 TailCall을 반환한다.<br>결과적으로 스택메모리를 사용하는 대신 힙메모리를 사용하게되면서 StactOverflowError를 피할 수 있다.</p><p>마지막으로 Suspend 인스턴스에서 바로 eval()을 사용할 수 있게 구현하고, 정적 팩토리 메서드 ret(), sus()를 구현하면 TailCall이 다음과 같이 완성된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TailCall</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> TailCall&lt;T&gt; <span class="title">resume</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">eval</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isSuspend</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Return&lt;T&gt; <span class="title">ret</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Return&lt;&gt;(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Suspend&lt;T&gt; <span class="title">sus</span><span class="params">(Supplier&lt;TailCall&lt;T&gt;&gt; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Suspend&lt;&gt;(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Return</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">TailCall</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Return</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TailCall&lt;T&gt; <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Return has no resume&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Suspend</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">TailCall</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Supplier&lt;TailCall&lt;T&gt;&gt; supplier;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Suspend</span><span class="params">(Supplier&lt;TailCall&lt;T&gt;&gt; supplier)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.supplier = supplier;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TailCall&lt;T&gt; <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> supplier.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TailCall&lt;T&gt; curr = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">while</span>(curr.isSuspend()) &#123;</span><br><span class="line">curr = curr.resume();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> curr.eval();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용 코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TailCall&lt;Integer&gt; <span class="title">sumRecur</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> acc)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n &lt;= <span class="number">1</span> ? TailCall.ret(acc) : TailCall.sus(() -&gt; sumRecur(n-<span class="number">1</span>, n + acc));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sumRecur(n, <span class="number">1</span>).eval();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sum(<span class="number">100000</span>));</span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://search.shopping.naver.com/book/catalog/32473004775?cat_id=50005740&frm=PBOKPRO&query=functional+programming+in+java&NaPm=ct=l65369hs%7Cci=4972220061a063cb65177d4359f709c0c85b86d0%7Ctr=boknx%7Csn=95694%7Chk=0878174e456c7c4ee1d9ce0150e03f7e2218c65c">Functional Programming in Java</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>자바스크립트로 알아보는 동기/비동기, 블록킹/논블록킹</title>
      <link href="2022/06/25/Sync-ASync-Block-NonBlock/"/>
      <url>2022/06/25/Sync-ASync-Block-NonBlock/</url>
      
        <content type="html"><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>각각의 정의를 핵심만 요약하면 다음과 같다.</p><ol><li>Block - 함수를 호출했을 함수의 모든 행위가 끝난 후에 제어권을 넘겨준다.</li><li>Non block - 함수를 호출하면 함수의 종료와 상관없이 바로 제어권을 넘겨준다.</li><li>Sync - 작업을 순차적으로 처리한다.</li><li>Async - 작업을 순차적으로 처리하지 않는다.</li></ol><h2 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h2><p>개념만 읽어서는 정확히 이해하기가 어렵다. 각각의 방식을 조합한 4가지방식에 대해 코드로 알아보자</p><ol><li>Blocking + Sync : 제어권을 끝날 때까지 안넘겨줌 + 순차적으로 실행</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum1 = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=n; i++) sum += i;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위 코드는 숫자 n을 받아 합계를 구하는 간단한 함수다. 이 함수 블록킹이자 동기 함수이다.<br>확인하기 위해서 다음을 실행해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum1(<span class="number">1e9</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;B&#x27;</span>);</span><br></pre></td></tr></table></figure><p>큰숫자를 인자로 넣어서 실행해보면 sum1 함수가 끝날 때까지 콘솔이 ‘B’가 찍히지 않고 완료되고나서 찍힌다.<br>끝날 떄까지 제어권이 아래로 넘어가지 않기 때문에 블록킹함수인 것을 확인할 수 있다.<br>또한 순차적으로 실행되기 때문에 당연히 동기방식이다.</p><ol start="2"><li>Blocking + Async : 순차적으로 실행할 필요가 없지만 + 제어권이 안넘어와서 결국 순차적으로 실행됨</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum2 = <span class="function">(<span class="params">n, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=n; i++) sum += i;</span><br><span class="line">    fn(sum);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sum2(<span class="number">1e9</span>, <span class="built_in">console</span>.log);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;B&#x27;</span>);</span><br></pre></td></tr></table></figure><p>자바스크립트에서 비동기 함수를 만드는 방법중 하나는 callback 함수를 이용하는 것이다.<br>A행위와 B행위에 인과관계가 있을 때 순서에 상관없이 실행할 수 있는 방법은 B가 A와 인과관계가 있는 순차적인 동작을 A에게 위임(callback)하는 것이다.<br>B는 그래서 A와 상관없이 동작할 수 있지만, A함수 자체가 블록킹함수라서 결국에는 막혀 순차적으로 실행되게 된다. 결국 비동기의 의미가 없어진다 ㅠㅠ</p><p><img src="/images/refer/async/non-meaning.jpg" alt="무슨 의미가 있니"> <em>Blocking + Async는 안티패턴이다</em></p><ol start="3"><li>Non Blocking + Sync : 제어권이 바로 넘어가지만 + 순차적으로 실행하기 위해 계속 모니터링함</li></ol><p>그렇다면 자바스크립트에서 논블로킹 함수는 어떻게 만들 수 있을까?<br>여러가지 방법이 있지만 가장 간단한 방법은 Web API에서 제공하는 setTimeout 함수를 사용하는 것이다.<br>Web API 같은 경우에는 Main UI 스레드와 다른 스레드에서 실행되기 때문에 제어권을 바로 넘겨줄 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;A&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;B&#x27;</span>);</span><br></pre></td></tr></table></figure><p>실제로 위 코드를 실행하면 ‘B’가 먼저 출력되는걸 볼 수 있다. 바로 제어권이 넘어오므로 논블록킹 함수이다.<br>setTimeout을 이용하여 sum1 함수를 논블로킹 + 동기 함수로 만들면 다음과 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum3 = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = &#123;<span class="attr">isComplete</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=n; i++) sum += i;</span><br><span class="line">        result.isComplete = <span class="literal">true</span>;</span><br><span class="line">        result.value = sum;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>함수가 실행되고 결과값을 바로 리턴한다. 일정시간이 지나고 result.isComplete 이 true가 됐을 때<br>연산값이 result에 입력될 것이다. 자바의 Future와 비슷하다 ^^<br>위 함수를 실행하여 콘솔에 찍어보자 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> future = sum3(<span class="number">1e9</span>);</span><br><span class="line"><span class="built_in">console</span>.log(future.value);</span><br></pre></td></tr></table></figure><p>실제 연산이 끝나기 전에는 undefined가 출력된다. 인과관계가 있어서 순차적으로 실행해야 한다면(동기) 다음과 같이 계속 작업이 끝났는지 모니터링 해줘야한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(future.isComplete) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(id);</span><br><span class="line">        <span class="built_in">console</span>.log(future.value / <span class="number">100</span>);        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/refer/async/sync-ask.jpg" alt="그만 물어봐"><em>계속 물어봐야됨 ㅎㅎㅎ</em></p><ol start="4"><li>Non Blocking + Async : 제어권을 바로 넘겨줌 + 콜백 함수를 주어서 자기일만 하면되므로 모니터링이 필요없다</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum4 = <span class="function">(<span class="params">n, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=n; i++) sum += i;</span><br><span class="line">        fn(sum);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sum4(<span class="number">1e9</span>, <span class="function"><span class="params">sum</span> =&gt;</span> <span class="built_in">console</span>.log(sum / <span class="number">100</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;B&#x27;</span>);</span><br></pre></td></tr></table></figure><p>실행해보면 ‘B’가 먼저 출력되는걸 볼 수 있다. </p><h2 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h2><p>이쯤에서 퀴즈~ 프론트웹에서 자주쓰는 jquery Ajax 함수는 어떤 방식으로 동작할까요?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = $.ajax(<span class="string">&quot;url&quot;</span>).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>정답은 …<br>제어권이 바로 b로 넘어가고, b와 순서상관없이 콜백(done)으로 처리하므로 비동기+논블락 입니다. ㅎㅎ</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><p><img src="/images/refer/async/sync-block.png" alt="조합표"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB Clob data 문자열 치환</title>
      <link href="2021/08/11/DB-Clob-data-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B9%98%ED%99%98/"/>
      <url>2021/08/11/DB-Clob-data-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B9%98%ED%99%98/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><p>DB에 저장되어있는 게시판 내용 중 img 태그 안에 있는 width, height 속성을 삭제하거나 변경해야 할 일이생겼다.</p><h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><ul><li>inline width, height 속성은 삭제</li><li>style 안의 width, height 값은 100% 로 변경</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//변경 전</span></span><br><span class="line">&lt;img src=<span class="string">&quot;...&quot;</span> width=<span class="string">&quot;200&quot;</span> height=<span class="string">&quot;300&quot;</span>&gt;</span><br><span class="line">&lt;img alt=<span class="string">&quot;...&quot;</span> style=<span class="string">&quot;width:200px; height:500px;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//변경 후</span></span><br><span class="line">&lt;img src=<span class="string">&quot;...&quot;</span>&gt;</span><br><span class="line">&lt;img alt=<span class="string">&quot;...&quot;</span> style=<span class="string">&quot;width:100%; height:100%;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="분석"><a href="#분석" class="headerlink" title="분석"></a>분석</h2><p>게시글이 천개가 넘게 등록되어있어서 내용을 하나하나 고치는 것은 매우 비효율적이다.<br>그래서 DB에서 데이터를 불러와 자바 정규식을 이용해 치환하여 UPDATE 하는 방법을 선택했다.<br>우선 변경할 테이블을 백업해준다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> board_bak <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> board</span><br></pre></td></tr></table></figure><p>업데이트 소스는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImgWidthHeightReplacer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> PreparedStatement selectPs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> PreparedStatement updatePs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UPDATE_EMPTY = <span class="string">&quot;UPDATE board SET contents = empty_clob() WHERE board_seq = ?&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SELECT_LOCK = <span class="string">&quot;SELECT contents FROM board WHERE board_seq = ? for update&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceContents</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, IOException </span>&#123;</span><br><span class="line">String sql = <span class="string">&quot;select board_seq, contents from board where use_html = &#x27;Y&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">getConnection();</span><br><span class="line">selectPs = connection.prepareStatement(sql);</span><br><span class="line">ResultSet rs = selectPs.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">String contents = rs.getString(<span class="string">&quot;contents&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(contents != <span class="keyword">null</span>) &#123;</span><br><span class="line">String reContents = contents.replaceAll(<span class="string">&quot;(&lt;img[^&gt;]*)(width=[\&quot;]?[^&gt;\&quot;]+[\&quot;]?)([^&gt;]*&gt;)&quot;</span>, <span class="string">&quot;$1$3&quot;</span>)</span><br><span class="line">.replaceAll(<span class="string">&quot;(&lt;img[^&gt;]*)(height=[\&quot;]?[^&gt;\&quot;]+[\&quot;]?)([^&gt;]*&gt;)&quot;</span>, <span class="string">&quot;$1$3&quot;</span>)</span><br><span class="line">.replaceAll(<span class="string">&quot;(&lt;img[^&gt;]*style=\&quot;[^&gt;]*width:)([a-zA-Z0-9]*;?)([^&gt;]*\&quot;)&quot;</span>, <span class="string">&quot;$1100%;$3&quot;</span>)</span><br><span class="line">.replaceAll(<span class="string">&quot;(&lt;img[^&gt;]*style=\&quot;[^&gt;]*height:)([a-zA-Z0-9]*;?)([^&gt;]*\&quot;)&quot;</span>, <span class="string">&quot;$1100%;$3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(reContents);</span></span><br><span class="line">updateContents(reContents, rs.getInt(<span class="string">&quot;board_seq&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closeResultSet(rs);</span><br><span class="line">closeSelectPs();</span><br><span class="line">closeConneciton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateContents</span><span class="params">(String contents, <span class="keyword">int</span> boardSeq)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">updatePs = connection.prepareStatement(UPDATE_EMPTY);</span><br><span class="line">updatePs.setInt(<span class="number">1</span>, boardSeq);</span><br><span class="line"><span class="keyword">if</span>(updatePs.executeUpdate() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">closeUpdatePs();</span><br><span class="line">updatePs = connection.prepareStatement(SELECT_LOCK);</span><br><span class="line">updatePs.setInt(<span class="number">1</span>, boardSeq);</span><br><span class="line"></span><br><span class="line">rs = updatePs.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">CLOB cl = ((OracleResultSet)rs).getCLOB(<span class="string">&quot;contents&quot;</span>);</span><br><span class="line">BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(cl.getCharacterOutputStream());</span><br><span class="line">writer.write(contents);</span><br><span class="line">writer.close();                </span><br><span class="line">&#125;</span><br><span class="line">connection.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">try</span> &#123; connection.rollback(); &#125; <span class="keyword">catch</span> (SQLException e1) &#123; System.out.println(<span class="string">&quot;rollback fail&quot;</span>); &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123; connection.setAutoCommit(<span class="keyword">true</span>); &#125; <span class="keyword">catch</span> (SQLException e) &#123;&#125;</span><br><span class="line">closeResultSet(rs);</span><br><span class="line">closeUpdatePs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(connection == <span class="keyword">null</span> || connection.isClosed()) &#123;</span><br><span class="line">Class.forName(<span class="string">&quot;oracle.jdbc.OracleDriver&quot;</span>);</span><br><span class="line">connection = DriverManager.getConnection(<span class="string">&quot;jdbc:oracle:thin:@127.0.0.1:1521:ORA9&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;connection fail&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeConneciton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(connection != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123; connection.close(); &#125; <span class="keyword">catch</span> (Exception e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeUpdatePs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(updatePs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123; updatePs.close(); &#125; <span class="keyword">catch</span> (Exception e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeSelectPs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(selectPs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123; selectPs.close(); &#125; <span class="keyword">catch</span> (Exception e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeResultSet</span><span class="params">(ResultSet rs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123; rs.close(); &#125; <span class="keyword">catch</span> (Exception e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ImgWidthHeightReplacer instance = <span class="keyword">new</span> ImgWidthHeightReplacer();</span><br><span class="line">instance.replaceContents();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>중요한 부분은 replaceContents() 메서드의 정규식 부분이다.</p><h2 id="치환-정규식"><a href="#치환-정규식" class="headerlink" title="치환 정규식"></a>치환 정규식</h2><ul><li>(&lt;img[^&gt;]<em>)(width=[&quot;]?[^&gt;&quot;]+[&quot;]?)([^&gt;]</em>&gt;)   <ul><li>1번 그룹 (&lt;img[^&gt;]*) <ul><li>&lt;img 문자열 뒤에 &gt; 가 아닌 문자가 0개 이상</li></ul></li><li>2번 그룹 (width=[&quot;]?[^&gt;&quot;]+[&quot;]?) <ul><li>width= 문자열 뒤에 “ 문자가 0 이나 1개</li><li>문자 &gt; 와 “ 가 아닌 문자가 하나 이상</li><li>“ 가 있거나 없음</li></ul></li><li>3번 그룹 ([^&gt;]*&gt;)   <ul><li>문자 &gt; 가 아닌 문자가 0개 이상</li></ul></li></ul></li></ul><blockquote><p>그룹캡쳐를 사용해 치환자를 $1$3으로하여 2번 그룹을 삭제한다. 결국 img 태그의 width=”…” 부분이 삭제된다.</p></blockquote><ul><li>(&lt;img[^&gt;]*style=&quot;[^&gt;]<em>width:)([a-zA-Z0-9]</em>;?)([^&gt;]*&quot;)<ul><li>1번 그룹 (&lt;img[^&gt;]*style=&quot;[^&gt;]*width:)<ul><li>img 태그 안에 style=”… width: 까지 캡쳐</li></ul></li><li>2번 그룹 ([a-zA-Z0-9]*;?)<ul><li>width: 후에 value 값</li></ul></li><li>3번 그룹 ([^&gt;]*&quot;)<ul><li>style 속성의 마지막 quote(“)</li></ul></li></ul></li></ul><blockquote><p>실행결과 제대로 변경된 것을 확인할 수 있었다.<br>실무에서 이런 류의 작업을 해야하는 경우가 종종 있는데 정규식을 적절하게 사용하면 쉽게 수정이 가능하다.<br>끝으로 리눅스에서 파일의 특정 문자를 치환하는 방법을 소개하면서 마친다.</p></blockquote><h2 id="리눅스-파일-문자열-치환"><a href="#리눅스-파일-문자열-치환" class="headerlink" title="리눅스 파일 문자열 치환"></a>리눅스 파일 문자열 치환</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name <span class="string">&quot;*.jsp&quot;</span> |xargs sed -i <span class="string">&quot;s/jquery-3.2.1.min.js/jquery-3.3.1.min.js/g&quot;</span></span><br></pre></td></tr></table></figure><p>현재폴더 아래의 jsp 파일 모두를 검색하여 “jquery-3.2.1.min.js” 문자열을 “jquery-3.3.1.min.js” 로 치환</p>]]></content>
      
      
      
        <tags>
            
            <tag> 정규식 </tag>
            
            <tag> 실무 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA 조건문 리팩토링</title>
      <link href="2021/07/07/refactoring-condition/"/>
      <url>2021/07/07/refactoring-condition/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/refer/if/kong-godzilla.jpg" alt="조건문잡기"></p><p>프로그램에서 읽기 어려고 복잡한 부분을 보면 주로 조건문이 많다.<br>이번 Archives에선 코드의 가독성을 떨어뜨리는 악의 축 조건문을 물리치는(?) 방법을 알아보기로한다.<br>우선 다음 막장 코드를 보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_TUITION = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> tuition = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    LocalDate now = LocalDate.now();</span><br><span class="line">    <span class="keyword">if</span>(now.compareTo(LocalDate.of(now.getYear(), <span class="number">07</span>, <span class="number">25</span>)) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; now.compareTo(LocalDate.of(now.getYear(), <span class="number">8</span>, <span class="number">30</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(now.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line">        System.out.println(<span class="string">&quot;여름 방학입니다&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        tuition = BASE_TUITION * <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasAnyFailure()) &#123;</span><br><span class="line">            createVacationCourse();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(now.compareTo(LocalDate.of(now.getYear(), <span class="number">12</span>, <span class="number">20</span>)) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; now.compareTo(LocalDate.of(now.getYear(), <span class="number">2</span>, <span class="number">28</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(now.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line">        System.out.println(<span class="string">&quot;겨울 방학입니다.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tuition = BASE_TUITION + <span class="number">10000</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasAnyFailure()) &#123;</span><br><span class="line">            createVacationCourse();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(now.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line">        tuition = BASE_TUITION + getAddtionalTuition(now);</span><br><span class="line">        createCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasAnyFailure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> anyFail = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(Student student : students) &#123;</span><br><span class="line">        <span class="keyword">if</span>(student.isFail()) &#123;</span><br><span class="line">            anyFail = <span class="keyword">true</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> anyFail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getAddtionalTuition</span><span class="params">(LocalDate startDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(startDate.getMonth() == Month.MARCH) &#123;</span><br><span class="line">        result = <span class="number">30000</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(startDate.getDayOfWeek() == DayOfWeek.SUNDAY) &#123;</span><br><span class="line">            result = <span class="number">20000</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="number">25000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 구현 안함</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFail</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125;</span><br><span class="line">    <span class="function">String <span class="title">getMajor</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>무슨 기능을 하는지 파악이 되는가? if문안에 if문 계속되는 분기문으로 이해하기가 어렵다.<br>물론 지금은 간단하게 만들어서 어느정도 시간을 들이면 파악이 되겠지만 시스템이 점점 복잡해지고 분기문이 계속 증가한다면 나중에는 소스분석이 불가능할 정도가 될 것이다.<br>위 코드의 기능을 간단히 설명하면 오늘 날짜가 여름방학, 겨울방학인지 구분해서<br>방학이면 학생들 가운데 낙제자가 있는지 파악하고 있으면 방학 강좌을 개설하고 학비를 계산하는 것이다.<br>리팩토링을 위해 억지로 만든 예제라서 조금 말이 안되지만 사실 여기서 코드가 무슨 기능을 하는 지는 중요하지 않다.<br>우리의 목적은 조건문을 리펙토링하는 것이다.<br>이제 위 코드의 리펙토링을 단계별로 진행해보겠다.</p><h2 id="1-조건문의-공통-코드를-빼내기"><a href="#1-조건문의-공통-코드를-빼내기" class="headerlink" title="1. 조건문의 공통 코드를 빼내기"></a>1. 조건문의 공통 코드를 빼내기</h2><p>조건문마다 공통되는 코드가 들어가 있다면 해당 코드를 조건문 밖으로 빼내야한다.<br>막장코드에서 공통되는 코드는 다음 부분이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(now.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br></pre></td></tr></table></figure><p>위 코드를 조건문 밖으로 보내면 코드는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> tuition = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    LocalDate now = LocalDate.now();</span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.BASIC_ISO_DATE));   <span class="comment">// 조건문 앞으로 뺌</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(now.compareTo(LocalDate.of(now.getYear(), <span class="number">07</span>, <span class="number">25</span>)) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; now.compareTo(LocalDate.of(now.getYear(), <span class="number">8</span>, <span class="number">30</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;여름 방학입니다&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        tuition = BASE_TUITION * <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasAnyFailure()) &#123;</span><br><span class="line">            createVacationCourse();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(now.compareTo(LocalDate.of(now.getYear(), <span class="number">12</span>, <span class="number">20</span>)) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; now.compareTo(LocalDate.of(now.getYear(), <span class="number">2</span>, <span class="number">28</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;겨울 방학입니다.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tuition = BASE_TUITION + <span class="number">10000</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasAnyFailure()) &#123;</span><br><span class="line">            createVacationCourse();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        tuition = BASE_TUITION + getAddtionalTuition(now);</span><br><span class="line">        createCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-조건문을-메서드로-분리"><a href="#2-조건문을-메서드로-분리" class="headerlink" title="2. 조건문을 메서드로 분리"></a>2. 조건문을 메서드로 분리</h2><p>막장코드에서 아래의 조건문은 무슨 판단을 하는 조건인지 이해하기 어렵다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(now.compareTo(LocalDate.of(date.getYear(), <span class="number">07</span>, <span class="number">25</span>)) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; now.compareTo(LocalDate.of(date.getYear(), <span class="number">8</span>, <span class="number">30</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(now.compareTo(LocalDate.of(date.getYear(), <span class="number">12</span>, <span class="number">20</span>)) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; now.compareTo(LocalDate.of(date.getYear(), <span class="number">2</span>, <span class="number">28</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure><p>if 절을 메서드로 분리하자<br>변경된 코드는 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(isSummerVacation(now)) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(isWinterVacation(now)) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSummerVacation</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date.compareTo(LocalDate.of(date.getYear(), <span class="number">07</span>, <span class="number">25</span>)) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; date.compareTo(LocalDate.of(date.getYear(), <span class="number">8</span>, <span class="number">30</span>)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isWinterVacation</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date.compareTo(LocalDate.of(date.getYear(), <span class="number">12</span>, <span class="number">20</span>)) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; date.compareTo(LocalDate.of(date.getYear(), <span class="number">2</span>, <span class="number">28</span>)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>메서드명만 잘 지으면 이름만 보고도 무엇을 판단하는 로직인지 쉽게 알 수 있다.</p><h2 id="3-제어-플래그-제거"><a href="#3-제어-플래그-제거" class="headerlink" title="3. 제어 플래그 제거"></a>3. 제어 플래그 제거</h2><p>hasAnyFailure() 메서드를 보자. 학생중에 낙제한 학생이 있는지 찾는 기능이다.<br>지역변수로 anyFail 이라는 제어 플래그가 존재하는데 이런 플래그는 break, continue, return 문으로 제거가 가능하다.<br>변경 전 후 코드는 다음과 같다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 변경 전</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasAnyFailure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> anyFail = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(Student student : students) &#123;</span><br><span class="line">        <span class="keyword">if</span>(student.isFail()) &#123;</span><br><span class="line">            anyFail = <span class="keyword">true</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> anyFail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변경 후</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasAnyFailure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Student student : students) &#123;</span><br><span class="line">        <span class="keyword">if</span>(student.isFail()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>불필요한 지역변수 플래그가 사라지고 루프를 무조건 전부 돌 필요가 없기 때문에 성능도 향상된다.</p><h2 id="4-감시절로-전환"><a href="#4-감시절로-전환" class="headerlink" title="4. 감시절로 전환"></a>4. 감시절로 전환</h2><p>getAddtionalTuition() 메서드를 보자<br>특정 개강날짜의 추가된 학비를 계산하는 기능이다.<br>예외적인 조건을 처리하는 분기문은 감시절로 전환하면 더 명확하고 가독성 좋은 코드가 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 변경 전</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getAddtionalTuition</span><span class="params">(LocalDate startDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(startDate.getMonth() == Month.MARCH) &#123;</span><br><span class="line">        result = <span class="number">30000</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(startDate.getDayOfWeek() == DayOfWeek.SUNDAY) &#123;</span><br><span class="line">            result = <span class="number">20000</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="number">25000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변경 후</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getAddtionalTuition</span><span class="params">(LocalDate startDate)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span>(startDate.getMonth() == Month.MARCH) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(startDate.getDayOfWeek() == DayOfWeek.SUNDAY) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20000</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">25000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-다형성을-이용한-재정의로-전환"><a href="#5-다형성을-이용한-재정의로-전환" class="headerlink" title="5. 다형성을 이용한 재정의로 전환"></a>5. 다형성을 이용한 재정의로 전환</h2><p>process() 메서드를 보면 일반/여름방학/겨울방학 분류에 따라 다르게 동작한다.<br>이처럼 조건에따라 다르게 동작하는 경우는 객체의 다형성을 이용해 분리하는게 좋다.<br>먼저 각각의 if문 블럭을 보면 다음과 같이 하는 일이 비슷하다</p><ul><li>방학을 알린다.</li><li>수업료를 계산한다.</li><li>강좌를 개설한다.</li></ul><p>위 메시지를 추상화하여 다음과 같은 추상클래스를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_TUITION = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyVacation</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getTuition</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">createCourse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">hasAnyFailure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Student student : students) &#123;</span><br><span class="line">        <span class="keyword">if</span>(student.isFail()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>중요한 것은 3개의 추상메서드이다.</p><ul><li>notifyVacation()   - 방학을 알린다.</li><li>getTuition()       - 수업료를 계산한다.</li><li>createCourse()     - 강좌를 개설한다.</li></ul><p>구현 클래스에서 사용이 필요한 필드(students, BASE_TUITION)와 메서드(hasAnyFailure())들도 추상클래스로 이동시켰다.<br>이제 각각의 구현클래스를 만들면 다음과 같다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummerVactionCourse</span> <span class="keyword">extends</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyVacation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;여름 방학입니다&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTuition</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BASE_TUITION * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hasAnyFailure()) createVacationCourse();        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createVacationCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WinterVacationCourse</span> <span class="keyword">extends</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyVacation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;겨울 방학입니다.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTuition</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BASE_TUITION + <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hasAnyFailure()) createVacationCourse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createVacationCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegularCourse</span> <span class="keyword">extends</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> LocalDate now;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RegularCourse</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.now = date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyVacation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTuition</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BASE_TUITION + getAddtionalTuition(now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">createRegularCourse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getAddtionalTuition</span><span class="params">(LocalDate startDate)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span>(startDate.getMonth() == Month.MARCH) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(startDate.getDayOfWeek() == DayOfWeek.SUNDAY) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20000</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">25000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createRegularCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>process()의 조건문을 보면 현재 날짜에 따라 Course의 구현 타입이 나뉘는 것을 알 수 있다.<br>날짜에 따라 해당 타입을 생성하는 팩토리 클래스를 만들어주자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Course <span class="title">CreateCourse</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isSummerVacation(date)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SummerVactionCourse();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(isWinterVacation(date)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> WinterVacationCourse();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RegularCourse(date);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSummerVacation</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> date.compareTo(LocalDate.of(date.getYear(), <span class="number">07</span>, <span class="number">25</span>)) &gt; <span class="number">0</span></span><br><span class="line">&amp;&amp; date.compareTo(LocalDate.of(date.getYear(), <span class="number">8</span>, <span class="number">30</span>)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isWinterVacation</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> date.compareTo(LocalDate.of(date.getYear(), <span class="number">12</span>, <span class="number">20</span>)) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; date.compareTo(LocalDate.of(date.getYear(), <span class="number">2</span>, <span class="number">28</span>)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 분리는 끝났다 아래는 지금까지 리팩토링한 소스의 UML이다.<br><img src="/images/refer/if/course-uml.jpg" alt="UML"></p><p>마지막으로 process() 메서드를 변경하면 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDate now = LocalDate.now();</span><br><span class="line">    System.out.println(now.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line">    </span><br><span class="line">    Course course = CourseFactory.CreateCourse(now);</span><br><span class="line">    course.notifyVacation();</span><br><span class="line">    tuition = course.getTuition();</span><br><span class="line">    course.createCourse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>외부에서는 강좌가 어떻게 생성되는지, 수업료가 어떻게 계산되는지 알 필요가없다 (캡슐화가 잘 되었다)<br>다른 강좌를 추가하더라도 새로운 Course 클래스를 구현하기만하면 되므로 Course 클래스를 변경할 필요가 없다 (OCP 원칙도 잘 지켜진다)<br>복잡한 조건문도 없어지면서 어떤 일을 하는지 한눈에 알 수 있게되었다.</p><blockquote><p>처음 코드와 비교해보면 많이 발전했다 ^^<br>하지만 아직 리팩토링이 완벽하진않다. 객체간 책임이동이 더 필요하고 몇가지 문제가 있지만 조건문 리팩토링의 주제에서 벗어나므로 이쯤에서 마무리한다.</p></blockquote><ul><li>참조 : [책] 리팩토링 - 마틴 파울러</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Refactoring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 비동기 프로그래밍의 4가지 방법</title>
      <link href="2021/06/08/JS-Sync-Programming-4ways/"/>
      <url>2021/06/08/JS-Sync-Programming-4ways/</url>
      
        <content type="html"><![CDATA[<h2 id="Asynchronous-code"><a href="#Asynchronous-code" class="headerlink" title="Asynchronous code"></a>Asynchronous code</h2><p>다음과 같이 유저정보를 가져오는 함수가 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getUser = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;timpac&#x27;</span>, <span class="attr">auth</span>:<span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getUser());<span class="comment">// &#123;name:&#x27;timpac&#x27;, auth:&#x27;admin&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>실행하면 유저의 정보가 잘 출력된다.<br>하지만 getUser() 함수를 실행하는 시간이 좀 걸린다고 가정했을 때도 제대로 값을 가져올까?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getUser = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;timpac&#x27;</span>, <span class="attr">auth</span>:<span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getUser());<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>setTimeout을 이용해 2초 딜레이 시켰더니 undefined가 출력된다.<br>javascript는 비동기적으로 수행되기 때문에 getUser() 함수가 실행이 끝나기도 전에 console 출력을 하기 때문이다.<br>순서대로 실행시키기 위해서는 동기화 시켜줘야한다. 동기화 시키는 여러가지 방법에 대해 알아보자</p><h2 id="synchronous-code"><a href="#synchronous-code" class="headerlink" title="synchronous code"></a>synchronous code</h2><ol><li>Callback Function</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getUser = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">callback(&#123;<span class="attr">name</span>:<span class="string">&#x27;timpac&#x27;</span>, <span class="attr">auth</span>:<span class="string">&#x27;admin&#x27;</span>&#125;);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUser(<span class="built_in">console</span>.log);   <span class="comment">// &#123;name:&#x27;timpac&#x27;, auth:&#x27;admin&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>첫번째는 callback을 이용한 방법이다. getUser()는 함수가 수행된 후에 호출할 Callback function을 인자로 받는다.<br>리턴값을 콜백함수 인자로 넣어서 호출하면 콜백함수에서 해당값을 사용할 수 있다.<br>이제 몇가지 작업을 더 추가해보자. 유저정보를 가져와서 권한을 체크하고 싶다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hasAuth = <span class="function">(<span class="params">auth, then</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">then(auth === <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>then이라는 이름의 콜백함수를 인자로 넣고 시간은 1초 지연시켰다.<br>실행코드는 다음과 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getUser(<span class="function"><span class="params">user</span> =&gt;</span> &#123; </span><br><span class="line">hasAuth(user.auth, <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이제 관리자 권한이 있다면 유저의 이름을 가져오는 기능을 추가해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getUserName = <span class="function">(<span class="params">userName, then</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">then(userName);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//실행코드</span></span><br><span class="line">getUser(<span class="function"><span class="params">user</span> =&gt;</span> &#123; </span><br><span class="line">hasAuth(user.auth, <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line">getUserName(user.name, <span class="function"><span class="params">userName</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(userName);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>3개의 function을 동기화 시켰을뿐인데 코드읽기가 벌써 힘들어보인다.<br>아직은 읽을만 하지만 만약 기능들이 계속해서 추가된다면 더욱 읽기가 어려워질 것이다.<br>위 실행코드처럼 콜백패턴이 계속 이어지는걸 Callback Hell이라고 한다</p></blockquote><p><img src="/images/refer/jsasync/callback-hell.png" alt="callback_hell"><em>콜백 지옥</em></p><ol start="2"><li>Promise<br>프로미스를 사용하면 좀더 읽기 편한 코드로 만들 수 있다.<br>위 3개의 함수를 프로미스로 바꾸면 아래와 같다</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getUser = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(&#123;<span class="attr">name</span>:<span class="string">&#x27;timpac&#x27;</span>, <span class="attr">auth</span>:<span class="string">&#x27;admin&#x27;</span>&#125;), <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasAuth = <span class="function"><span class="params">auth</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(auth === <span class="string">&#x27;admin&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getUserName = <span class="function"><span class="params">userName</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(userName), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Promise에 대한 자세한 설명은 생략한다(귀찮..) 링크로 대체 ^^<br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p></blockquote><p><img src="/images/omit.jpg" alt="omit"></p><p>이제 실행코드를 작성해보자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getUser().then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">hasAuth(user.auth).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line">getUserName(user.name).then(<span class="function"><span class="params">userName</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(userName);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>오잉? 이것은 어디서 많이 본듯한 형태인데? 류가 장풍을 쏠것만 같다<br>callback hell을 벗어나기 위해서 Promise를 썼는데 Promise Hell에 빠져버렸다 ^^</p></blockquote><p>위 코드는 Promise를 제대로 사용하지 못했기 때문에 발생한다.<br>지옥에서 나오기 위해 Promise chaining을 이용하여 다음과 같이 수정했다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getUser().then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hasAuth(user.auth)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line"><span class="keyword">return</span> getUserName(user.name);<span class="comment">// user 접근이 안됨</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><p>실행하니 user.name 이 undefined로 출력된다. 두번째 then()으로 권한 체크 값만 들어가기 때문에<br>유저 정보를 참조할 수 없는 문제가 발생한다.<br>상위chain의 데이터를 참조 하고 싶을땐 Chain을 분리하는 방법, 전역변수를 이용하는 방법 등이 있지만<br>제일 좋은 방법은 async/await을 이용하는 것이다.</p><ol start="3"><li>async / await</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncProcess = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> getUser();</span><br><span class="line"><span class="keyword">const</span> isAdmin = <span class="keyword">await</span> hasAuth(user.auth);</span><br><span class="line"><span class="built_in">console</span>.log(isAdmin);</span><br><span class="line"><span class="keyword">if</span>(isAdmin) &#123;</span><br><span class="line"><span class="keyword">const</span> userName = <span class="keyword">await</span> getUserName(user.name);</span><br><span class="line"><span class="built_in">console</span>.log(userName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncProcess();</span><br></pre></td></tr></table></figure><p>제대로 동작한다. 코드의 가독성도 좋아졌다</p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/async_function">async/await 사용방법</a></p><ol start="4"><li>reduce를 이용한 방법</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> composeAsync = <span class="function">(<span class="params">...funcs</span>) =&gt;</span> <span class="function"><span class="params">x</span> =&gt;</span> funcs.reduce(<span class="function">(<span class="params">acc,val</span>) =&gt;</span> acc.then(val), <span class="built_in">Promise</span>.resolve(x));</span><br><span class="line"></span><br><span class="line">composeAsync(</span><br><span class="line">getUser,</span><br><span class="line">user =&gt; user.auth,</span><br><span class="line">hasAuth,</span><br><span class="line">getUserName,<span class="comment">//user를 받지 못함</span></span><br><span class="line"><span class="built_in">console</span>.log</span><br><span class="line">)();</span><br></pre></td></tr></table></figure><blockquote><p>역시나 상위 함수의 데이터를 가져오지 못하는 문제가 있다. 하나의 데이터를 사용할 때만 써야될 것같다.<br>방법이 있을 것 같기는한데 잘 모르겠다. 혹시나 아시는 분 있으면 알려주시면 감사~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Optional Best Practices</title>
      <link href="2021/05/14/Java-Optional-Best-Practices/"/>
      <url>2021/05/14/Java-Optional-Best-Practices/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Optional 변수에 null을 할당하지 마라</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;Cart&gt; <span class="title">fetchCart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;Cart&gt; emptyCart = <span class="keyword">null</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREPER</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;Cart&gt; <span class="title">fetchCart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;Cart&gt; emptyCart = Optional.empty();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>빈값으로 초기화하려면 Optional.empty()를 사용하자.</p><br></li><li><p>Optional.get()을 사용하기 전에는 반드시 Optional에 값이 있는지 확인해라</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line">Optional&lt;Cart&gt; cart = CartRepository.findOne();</span><br><span class="line">Cart myCart = cart.get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREPER</span></span><br><span class="line">Optional&lt;Cart&gt; cart = CartRepository.findOne();</span><br><span class="line"><span class="keyword">if</span>(cart.isPresent()) &#123;</span><br><span class="line">    Cart myCart = cart.get();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//값이 없을 때</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>cart값이 없으면 cart.get()은 에러를 발생시킨다. 그래서 항상 get() 호출 이전에 isPresent()로 체크를 해줘야한다. Optional이 생긴이유가 null check에서 벗어나기 위함인데 이렇게 사용한다면 결국 다를게 없다. 아래에 나오는 orElse()나 orElseGet()을 사용하자.</p></blockquote></li></ol><br><ol start="3"><li><p>isPresent()-get() 보다는 orElse()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_STATUS = <span class="string">&quot;UNKNOWN&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUserStatus</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; status = ... ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status.isPresent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> status.get();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> USER_STATUS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREPER</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUserStatus</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; status = ... ;</span><br><span class="line">    <span class="keyword">return</span> status.orElse(USER_STATUS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>orElseGet()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">computeStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// status를 계산하여 리턴하는 로직</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUserStatus</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; status = ... ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status.isPresent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> status.get();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computeStatus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUserStatus</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; status = ... ;</span><br><span class="line">    status.orElse(computeStatus());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREPER</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUserStatus</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; status = ... ;</span><br><span class="line">    <span class="keyword">return</span> status.orElseGet(<span class="keyword">this</span>::computeStatus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>첫번째 AVOID는 isPresent()-get()을 피하라는 것이고, 두번째 AVOID는 얼핏보면 문제 없을 것 같지만 orElse()는 status에 값이 있어도 computeStatus()메소드를 호출하기 때문에 orElseGet()을 쓰는 것이 좋다.</p></blockquote></li></ol><br><ol start="5"><li><p>orElseThrow()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUserStatus</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; status = ... ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status.isPresent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> status.get();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUserStatus</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; status = ... ;</span><br><span class="line">    <span class="keyword">return</span> status.orElseThrow();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>orElseThrow()는 Java 10부터 사용가능하다.<br>이하 버전은 orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)를 사용해야한다.</p></blockquote><br></li><li><p>Optional.ifPresent()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line">Optional&lt;String&gt; status = ... ;</span><br><span class="line"><span class="keyword">if</span> (status.isPresent()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Status: &quot;</span> + status.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line">Optional&lt;String&gt; status ... ;</span><br><span class="line">status.ifPresent(System.out::println); </span><br></pre></td></tr></table></figure><br></li><li><p>lamda 사용으로 Optional 얻기</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Product&gt; products = ... ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AVOID</span></span><br><span class="line">Optional&lt;Product&gt; product = products.stream()</span><br><span class="line">    .filter(p -&gt; p.getPrice() &lt; price)</span><br><span class="line">    .findFirst();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (product.isPresent()) &#123;</span><br><span class="line">    <span class="keyword">return</span> product.get().getName();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NOT FOUND&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line"><span class="keyword">return</span> products.stream()</span><br><span class="line">    .filter(p -&gt; p.getPrice() &lt; price)</span><br><span class="line">    .findFirst()</span><br><span class="line">    .map(Product::getName)</span><br><span class="line">    .orElse(<span class="string">&quot;NOT FOUND&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Stream 의 findFirst(), findAny(), reduce() 같은 메소드는 Optional을 리턴한다. 적절히 사용하면<br>코드의 분리없이 메소드 체이닝을할 수 있다.</p></blockquote></li></ol><br><ol start="8"><li>Optional의 과도한 사용<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fetchStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String status = ... ;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(status).orElse(<span class="string">&quot;PENDING&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fetchStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String status = ... ;</span><br><span class="line">    <span class="keyword">return</span> status == <span class="keyword">null</span> ? <span class="string">&quot;PENDING&quot;</span> : status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>단순 값을 가져오는 메서드에 Optional을 사용하는 것은 Optional의 목적에 맞지않는 과도한 사용이다.</p></blockquote></li></ol><br><ol start="9"><li><p>필드 선언에 사용하지마라</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    Optioanl&lt;String&gt; zip;</span><br><span class="line">    Optioanl&lt;String&gt; zip = Optional.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    String zip;</span><br><span class="line">    String zip = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>생성자, 메서드, Setter 인자로 사용하지마라</p><br></li><li><p>빈 Collection이나 Array를 리턴할 때 Optional을 쓰지마라</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="keyword">public</span> Optional&lt;List&lt;String&gt;&gt; fetchCartItems() &#123;</span><br><span class="line">    List&lt;String&gt; items = cart.getItems();</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(items);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fetchCartItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; items = cart.getItems();</span><br><span class="line">    <span class="keyword">return</span> items == <span class="keyword">null</span> ? Collections.emptyList() : items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>기본자료형에 Optional<T> 제네릭을 사용하지마라</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line">Optional&lt;Integer&gt; price = Optional.of(<span class="number">50</span>);</span><br><span class="line">Optional&lt;Long&gt; price = Optional.of(<span class="number">50L</span>);</span><br><span class="line">Optional&lt;Double&gt; price = Optional.of(<span class="number">50.43d</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line">OptionalInt price = OptionalInt.of(<span class="number">50</span>);</span><br><span class="line">OptionalLong price = OptionalLong.of(<span class="number">50L</span>);</span><br><span class="line">OptionalDouble price = OptionalDouble.of(<span class="number">50.43d</span>);</span><br></pre></td></tr></table></figure><br></li><li><p>동등성(Equality) 비교를 위해 unWrap할 필요가없다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; actual = Optional.of(<span class="string">&quot;shoes&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; expected = Optional.of(<span class="string">&quot;shoes&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// AVOID</span></span><br><span class="line">assertEquals(expected.get(), actual.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line">assertEquals(expected, actual);</span><br></pre></td></tr></table></figure><blockquote><p>Optional의 equals 메소드는 내부 값을 비교하도록 구현되어있기 때문에 바로 비교하면된다.</p></blockquote></li></ol><br> 14. Optional 값을 변경하거나 필터링할 때는 스트림 API를 이용하자<ul><li>map()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; lowerName = Optional.of(<span class="string">&quot;optional&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; upperName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="keyword">if</span>(lowerName.isPresent()) &#123;</span><br><span class="line">    upperName = Optional.of(lowerName.get().toUpperCase());</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    upperName = Optional.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line">upperName = lowerName.map(String::toUpperCase);</span><br></pre></td></tr></table></figure></li><li>filter, flatMap()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String uppercase = items.stream()</span><br><span class="line">.filter(i -&gt; i.getPrice() &gt; <span class="number">50</span>)</span><br><span class="line">    .findFirst()</span><br><span class="line">    .flatMap(i -&gt; Optional.of(i.getName()))</span><br><span class="line">    .map(String::toUpperCase).orElse(<span class="string">&quot;NOT FOUND&quot;</span>);</span><br></pre></td></tr></table></figure><br></li></ul><ol start="15"><li>indentity 기반 연산을 하지마라<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line">Optional&lt;Product&gt; op1 = Optional.of(product);</span><br><span class="line">Optional&lt;Product&gt; op2 = Optional.of(product);</span><br><span class="line"></span><br><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="keyword">if</span> (op1 == op2) &#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PREFER</span></span><br><span class="line"><span class="keyword">if</span> (op1.equals(op2)) &#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NEVER DO</span></span><br><span class="line"><span class="keyword">synchronized</span>(op1) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Optional은 Value-based class 이므로 equality (==), identity hash-based, synchronization 연산을 하면 예상과 다르게 동작될 수 있다. equals()를 사용하자.</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>세션 클러스터링(Session Clustering)과 JVM Memory</title>
      <link href="2021/04/02/jeus-session-tracking-in-cluster/"/>
      <url>2021/04/02/jeus-session-tracking-in-cluster/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>얼마전 유지보수 하는 곳의 권한 체크하는 부분의 소스를 보다가 신기한(?) 코드를 발견했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String author = (String)session.getAttribute(<span class="string">&quot;author&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(author == <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//관리자</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>오잉? 세션으로 권한 체크를 하는데 String 비교에 indentity(==) 연산을 사용하고 있다.</p></blockquote><p>내가 이상하게 생각한 이유는 해당 시스템의 환경때문이다.<br>java servlet engine이 분산 클러스터로 구성되어서 각각의 container는 독립된 JVM을 가지고 있었기 때문이다.<br>그런데 또 기능은 잘 동작된다. ㅎㅎ<br>만약 두개의 웹엔진 A,B가 있다고 했을 때 처음 요청은 A로 다음 요청은 B로 보낸다면 session.getAttribute(“author”)로 session을 가져올 때마다 각각의 다른 JVM 메모리에서 가져올텐데 어떻게 독립된 JVM에서 같은 레퍼런스를 참조할 수 있는걸까??</p><p><img src="/images/frog-question.jpg" alt="question"><em>뭐지..?</em></p><h2 id="의문점"><a href="#의문점" class="headerlink" title="의문점"></a>의문점</h2><ol><li>2개의 웹 엔진 A, B가 있을 때 독립된 세션 메모리를 어떻게 같이 공유할 수 있는가?</li><li>같은 세션 메모리를 참조한다고 했을 때 String indentity 연산은 왜 잘 작동하는가?</li></ol><p>먼저 의문점 1번을 해결하기 위해서 해당 서버인 JEUS의 session tracking 방식에 대해 알아보았다.</p><h2 id="세션-트래킹-Session-Tracking-동작방식"><a href="#세션-트래킹-Session-Tracking-동작방식" class="headerlink" title="세션 트래킹(Session Tracking) 동작방식"></a>세션 트래킹(Session Tracking) 동작방식</h2><p>세션 트래킹(Session Tracking) 동작방식에는 세션라우팅, 세션서버, 혼합방식이 있다.</p><ol><li>세션 라우팅(Session Routing)<br>세션라우팅은 해당 세션에 자신이 생성 또는 저장된 엔진의 ID를 부여한다.<br>다음 요청이 올 때 쿠키에 해당 엔진의 아이디가 포함되어 있어서 항상 같은 엔진으로 요청을 보내게 된다.</li></ol><p><img src="/images/refer/session/session-routing-first.png" alt="세션라우팅"><em>첫번째 요청</em></p><p><img src="/images/refer/session/session-routing-second.png" alt="세션라우팅"><em>두번째 요청</em></p><p>첫번째 요청을했을 때 세션오브젝트와 쿠키에 엔진 이름을 붙여서 넣는다.<br>두번째 요청을했을 때 세션쿠키의 이름에 따라 해당 엔진으로 요청을 보낸다.</p><ol start="2"><li>세선 서버(Session Server)<br><img src="/images/refer/session/session_server.png" alt="세션서버"><em>출처:<a href="https://technet.tmaxsoft.com/">https://technet.tmaxsoft.com</a></em></li></ol><p>궁금증이 해결되었다. 세션라우팅방식으로 되어있어서 세션쿠키 아이디에 엔진 이름을 담아서 하나의 세션스코프 동안에는 항상 세션이 생성된 엔진으로만 요청이 가게된다. </p><h2 id="Session-Routing-Test"><a href="#Session-Routing-Test" class="headerlink" title="Session Routing Test"></a>Session Routing Test</h2><p>정말 그런지 테스트를 해봤다. 먼저 세션을 확인 할수 있는 jsp페이지를 만든다</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    HttpSession sess = request.getSession();</span><br><span class="line">    <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;key&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sess.setAttribute(request.getParameter(<span class="string">&quot;key&quot;</span>),request.getParameter(<span class="string">&quot;val&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> isNew = session.isNew();</span><br><span class="line">    String sessionId = session.getId();</span><br><span class="line">    <span class="keyword">long</span> creationTime = session.getCreationTime();</span><br><span class="line">    <span class="keyword">long</span> lastAccessedTime = session.getLastAccessedTime();</span><br><span class="line">    <span class="keyword">int</span> maxInactiveInterval = session.getMaxInactiveInterval();</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table border=<span class="number">1</span>&gt;</span><br><span class="line">    &lt;tr bgcolor=&quot;gray&quot;&gt;&lt;td colspan=2 align=&quot;center&quot;&gt;&lt;b&gt;Session Info&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td width=&quot;25%&quot;&gt;Session ID&lt;/td&gt;&lt;td width=&quot;75%&quot;&gt;&lt;%=sessionId%&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;isNew?&lt;/td&gt;&lt;td&gt;&lt;%=isNew%&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Creation Time&lt;/td&gt;&lt;td&gt;&lt;%=new Date(creationTime)%&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Last Accessed Time&lt;/td&gt;&lt;td&gt;&lt;%=new Date(lastAccessedTime)%&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Max Inactive Interval&lt;/td&gt;&lt;td&gt;&lt;%=maxInactiveInterval%&gt; sec&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>화면 결과는 다음과 같이 나왔다<br><img src="/images/refer/session/session-capture.png" alt="세션캡쳐"><em>세션캡쳐</em></p><p>Session ID값 맨뒤를 보면 “.AP1_servlet_engine1” 처럼 뒤에 컨테이너 엔진이름이 붙어서 나온다<br>여러번 요청해보니 세션이 유지된 상태에서는 계속 같은 1번엔진으로 요청이 가는걸 확인할 수 있었다.</p><h2 id="HttpSession과-JVM-Constant-Pool"><a href="#HttpSession과-JVM-Constant-Pool" class="headerlink" title="HttpSession과 JVM Constant Pool"></a>HttpSession과 JVM Constant Pool</h2><p>의문점 2번.<br>같은 JVM 메모리를 참조하는건 알았다. 그런데 author == “admin” 연산은 어떻게 일관성있는 결과가 나오는걸까?</p><p>session.getAttribute(“author”) 메소드를 호출하면 HttpSession은 내부적으로 가지고 있는  ConcurrentHashMap.get(“author”)을 호출한다.<br>결과적으로 ConcurrentHashMap이 가지고있는 value값이 항상 같은 참조를 리턴해야 일관성있는 비교가 가능하다는 결론이 나온다.<br>서버에 세션을 저장하기 위해서 session.setAttribute(“author”, “amdin”) 하면 내부적으로 다음 코드가 실행될 것이다.</p><p><code>test.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentHashMap&lt;String, String&gt; sessionMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">sessionMap.put(<span class="string">&quot;auth&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br></pre></td></tr></table></figure><p>컴파일 후에 javap를 이용하여 바이트코드를 확인해보자</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -v test.class</span><br></pre></td></tr></table></figure><p>그럼 다음과 같은 결과가 나온다.<br><img src="/images/refer/session/constant-pool-complie.PNG" alt="javap"><em>contant pool 확인</em></p><p>#21을 보면 contant pool에 “admin”이 저장되는걸 알 수 있다.</p><blockquote><p>JVM은 String 같은 상수를 담아놓는 contant pool이란 공간이 따로있다.<br>여기서는 contant pool에 대해서 따로 다루지 않겠다. 검색해보면 많이 나온다 ^^;</p></blockquote><p>다른 세션객체에서 같은 contant pool의 참조를 가지고 있기 때문에 같은 결과가 나올 수 있었던 것이다.</p><p><img src="/images/refer/session/jvm-constantpool.png" alt="jvm-memory"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie SameSite와 Session 끊김 문제</title>
      <link href="2021/03/10/Cookie-SameSite%EC%99%80-Session-%EB%81%8A%EA%B9%80-%EB%AC%B8%EC%A0%9C/"/>
      <url>2021/03/10/Cookie-SameSite%EC%99%80-Session-%EB%81%8A%EA%B9%80-%EB%AC%B8%EC%A0%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><p>특정 메뉴에서 세션이 계속 끊어지는 현상 발생</p><h2 id="분석"><a href="#분석" class="headerlink" title="분석"></a>분석</h2><p>디버깅 결과 해당 기능에서 외부 API에 요청을 보내고 응답을 받은 후 세션이 끊어지는 것을 확인하였다.<br>세션은 우리 서버에 저장되어있는데 API 연동과 무슨 관계가 있길래 세션이 끊어진 걸까??<br>처음엔 이해가 되지 않았다. 이상하다… </p><blockquote><p>앗! 맞다 서버에만 저장되어있는게 아니지.. 사용자를 식별하기 위해서 쿠키를 심어놓은다는 사실을 간과했다.</p></blockquote><p>톰캣에선 세션이 생성될 때 상태를 유지하기 위해 사용자 브라우저에 JSESSIONID란 이름의 쿠키를 저장한다.<br>확인해보니 API 호출 후에 JSESSIONID 값이 변경되는 현상을 발견할 수 있었다.</p><p><img src="/images/refer/cookie-capture.JPG" alt="jsessionid"><em>picture 1. 쿠키 확인</em></p><h3 id="JSESSIONID"><a href="#JSESSIONID" class="headerlink" title="JSESSIONID"></a>JSESSIONID</h3><p>왜 변경되었을까? 먼저 Session과 Cookie의 생성과정을 살펴보자.</p><p><img src="/images/refer/session-cookie.png" alt="session-cooke"><em>picture 2. 쿠키생성프로세스</em></p><ol><li>클라이언트에서 처음 요청을하면 서버에서 세션을 생성하고 요청정보에 JSESSIONID 쿠키값이 없으면 새로 생성하여 Response의 Set-Cookie Header에 추가하여 보낸다.</li><li>브라우저에서는 Set-Cookie에 있는 JSESSIONID를 쿠키에 저장한다.</li><li>다음 요청부터는 브라우저에서 Cookie를 요청정보에 포함하여 보낸다.</li><li>서버에서는 요청해더에 JSESSIONID값을 읽어서 상태를 유지한다.</li></ol><p>위 과정을 보면 JSESSIONID가 생성되는 경우는 클라이언트 요청에서 Cookie를 보내지 않았을 때이다.<br>그래서 API 요청시에 Cookie를 보내지 못하는게 아닐까하는 의심이 들었고 확인해보니 역시나 보내지 않고 있었다.<br>요청쿠키가 없으니 계속 새로운 세션아이디를 생성했던 것이다.</p><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><p>쿠키를 보내지 못한 원인은 크롬 브라우저의 정책 변경 때문이다.<br>크롬80버전부터 새로운 쿠키 정책이 적용 되어 Cookie의 SameSite 속성의 기본값이 “None”에서 “Lax”로 변경되었다.<br>SameSite 속성의 값은 Strict, Lax, None 3가지가 있다.</p><ul><li>Strict : 도메인이 다를 경우 쿠키를 서버로 전송하지 않는다</li><li>Lax : link rel, a link, GET 요청과 같은 특정한 경우에만 쿠키를 전송</li><li>None : 도메인이 달라도 쿠키를 전송, 꼭 secure 옵션과 같이 사용해야함(https만 가능)</li></ul><p>SameSite 속성 값이 Lax로 설정되어서 쿠키가 전송되지 못하고 결국 JSESSIONID가 변경되는 불상사가 생기게 된 것이다.</p><p><img src="/images/refer/cookie-block.png" alt="cookie-block"><em>picture 3. 정책에따른 cookie block</em></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>구글 검색을해보니 이미 많은 개발자들이 비슷한 문제를 겪고 있었다.<br>대부분의 해결방법으로 제시한 것은 쿠키 설정에 sameSite=none secure를 적용하는 것이였다.<br>하지만 보안상 좋아 보이지 않고 근본적인 해결 방법이 아닌 것 같다.<br>내가 해결한 방법은 JSESSIONID의 이름을 바꾸는 것이다.<br>server.xml :<br>&lt;Context  …  sessionCookieName=”MYJSESSIONID”/&gt;</p><p>SameSite=Lax는 Get요청일 때 쿠키전송이 가능하다고 하니 API 요청을 GET방식으로 할 수 있으면 변경해보는 것도 고려해볼만할 것같다.<br>직접 적용해보진 않아서 모르겠다 ㅎㅎ</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>프론트엔드 파이가 점점 커짐에따라 갈수로 브라우저 보안이 강화되는 추세다.<br>현재 크로미움 엔진 기반 브라우저들이 시장을 장악하고 있어서 다른 브라우저들도 크롬정책을 따라가지 않을까 싶다.<br>SameSite=None 옵션도 삭제될 예정이라고 하며, CSRF 취약점 때문에라도 다른 도메인과의 쿠키 공유는 웬만하면 하지 않는게 좋겠다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AMQP + RabbitMQ message pub/sub example</title>
      <link href="2021/03/04/Spring-AMQP-RabbitMQ-message-pub-sub-example/"/>
      <url>2021/03/04/Spring-AMQP-RabbitMQ-message-pub-sub-example/</url>
      
        <content type="html"><![CDATA[<h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><ul><li>AMQP 프로토콜에 대한 이해</li><li>메시지 전송 기반 시스템으로 음식점에 주문을 하는 간단한 시스템을 만들기</li><li>message queuing을 위해서 AMQP Broker인 RabbitMQ를 사용</li></ul><h2 id="AMQP란"><a href="#AMQP란" class="headerlink" title="AMQP란?"></a>AMQP란?</h2><p>메시지 전송을 위한 프로토콜로 다음 그림을 보면 쉽게 이해가된다.<br><br/></p><p><img src="/images/refer/amqp/amqp.png" alt="amqp"><em>Advanced Message Queuing Protocol</em></p><ul><li>Message</li><li>Exchange : 메시지를 담고 있으며, queue에 바인딩 시키는 라우터 역할을 한다. 종류는 다음과 같다.<ul><li>Direct Exchange : routing key를 기반으로 큐에 전달</li><li>Fanout Exchange : 모든 큐에 전달</li><li>Topic Exchange : routing key 패턴으로 바인딩</li><li>Headers Exchange : 해더 속성을 사용하여 바인딩</li></ul></li><li>Queue : 대기열</li><li>Binding : Exchange가 Queue에 바인딩하기 위한 rule<blockquote><p>RabbitMQ 사이트에 재밌는 예시가 있다.<br>“Queue가 뉴욕의 한 목적지 라면, Exchange는 JFK 공항이고, Bindings는 목적지까지 가는 여러개의 길이다.”</p></blockquote></li></ul><h2 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required</h2><ul><li>Java 11</li><li>RabbitMQ 3.8.14</li><li>Spring boot 2.4.3</li></ul><h2 id="Setup-the-RabbitMQ"><a href="#Setup-the-RabbitMQ" class="headerlink" title="Setup the RabbitMQ"></a>Setup the RabbitMQ</h2><ul><li>RabbitMQ <a href="https://www.rabbitmq.com/">다운로드</a></li><li>다운로드하여 직접 설치해도 되지만 필자는 편의상 Docker로 실행하였다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management</span><br></pre></td></tr></table></figure>도커 실행 후 <a href="http://localhost:15672로">http://localhost:15672로</a> 접속하여 로그인 화면이 나온다면 제대로 구동된 것이다.<br>guest 계정으로 접속하면 다음과 같은 Rabbit Management 화면을 볼 수 있다.<br/></li></ul><p><img src="/images/refer/amqp/amqp_rabbit1.png" alt="amqp"></p><h2 id="Spring-boot-Application"><a href="#Spring-boot-Application" class="headerlink" title="Spring boot Application"></a>Spring boot Application</h2><ul><li><a href="https://start.spring.io/">Spring Initializr</a>를 사용해 spring boot 프로젝트를 하나 만든다<br>dependency에 spring-boot-starter-amqp를 추가해준다.</li></ul><p>pom.xml :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.timpac<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqpdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>amqpdemo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Message-Sender"><a href="#Message-Sender" class="headerlink" title="Message Sender"></a>Message Sender</h2><ul><li><p>우선 메시지 송신을 위한 AMQP 관련 객체들을 bean으로 등록한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.timpac.amqpdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderAmqpConfig</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;ORDER_QUEUE&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">&quot;ORDER_EXCHANGE&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY_PREPEND = <span class="string">&quot;IO.TIMPAC.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_NAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(EXCHANGE_NAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">binding</span><span class="params">(Queue queue, TopicExchange exchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTING_KEY_PREPEND + <span class="string">&quot;#&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AmqpTemplate <span class="title">amqpTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">RabbitTemplate template = <span class="keyword">new</span> RabbitTemplate(connectionFactory);</span><br><span class="line">template.setMessageConverter(messageConverter());</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>queue() : “ORDER_QUEUE”란 이름을 가진 Queue를 만든다.<br>exchange() : “ORDER_EXCHANGE”란 이름을 가진 Exchange를 만든다. 패턴으로 바인딩하기 위해 TopicExchange로 만들었다.<br>binding() : Exchange와 Queue를 route key로 바인딩 시킨다. RabbitMQ는 메시지를 보낼 때 큐에 바인딩 하기 위해 이 객체를 사용한다.<br>amqpTemplate() : RabbitTemplate을 등록해준다. json형식으로 보내기 위해서 messegeConverter로 Jackson2JsonMessageConverter를 사용하였다.</p><br/></li><li><p>주문 정보를 담을 ORDER 클래스를 만든다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.timpac.amqpdemo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String orderId;</span><br><span class="line"><span class="keyword">private</span> String menu;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> quantity;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> menu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenu</span><span class="params">(String menu)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.menu = menu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQuantity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> quantity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuantity</span><span class="params">(<span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.quantity = quantity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Order [orderId=&quot;</span> + orderId + <span class="string">&quot;, menu=&quot;</span> + menu + <span class="string">&quot;, quantity=&quot;</span> + quantity + <span class="string">&quot;, price=&quot;</span> + price + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대충 메뉴, 수량, 가격 등 간단하게 만들었다.</p><br/></li><li><p>주문 메시지를 전송할 Publisher를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.timpac.amqpdemo.publisher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> io.timpac.amqpdemo.config.OrderAmqpConfig;</span><br><span class="line"><span class="keyword">import</span> io.timpac.amqpdemo.dto.Order;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPublisherController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderPublisherController</span><span class="params">(RabbitTemplate template)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.template = template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;&#123;restaurant&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">order</span><span class="params">(<span class="meta">@RequestBody</span> Order order, <span class="meta">@PathVariable</span> String restaurant)</span> </span>&#123;</span><br><span class="line">order.setOrderId(UUID.randomUUID().toString());</span><br><span class="line">template.convertAndSend(OrderAmqpConfig.EXCHANGE_NAME, OrderAmqpConfig.ROUTING_KEY_PREPEND + restaurant, order);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;주문 완료&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RabbitTemplate의 convertAndSend() 메서드를 이용해 message를 Rabbit 서버에 전송한다.<br>인자로는 Exchange name, Routing Key, Playload가 들어간다.<br>Exchange name에는 OrderAmqpConfig에서 지정한 EXCHANGE_NAME을 넣는다<br>Routing Key는 음식점별로 큐를 분리하기 위해서 패턴 뒤에 음식점 이름을 패스인자로 받아서 넣었다<br>Playload에는 주문정보가 담긴 Order 객체가 들어간다.</p></li></ul><h2 id="Send-a-Test-Message"><a href="#Send-a-Test-Message" class="headerlink" title="Send a Test Message"></a>Send a Test Message</h2><p>이제 메시지 전송 테스트를 해보자. POSTMAN을 사용하여 다음과 같이 요청했다.<br><img src="/images/refer/amqp/amqp_postman.png" alt="amqp"></p><blockquote><p>내가 좋아하는 맘스터치 화이트갈릭버거를 신청했다. (맘스터치 광고 아님 ^^)</p></blockquote><p>신청 후 다시 RabbitMQ 관리자 페이지를 확인해보자<br><img src="/images/refer/amqp/amqp_rabbit2.png" alt="amqp"><br>위와 같이 큐에 메시지 하나가 들어가 있는걸 볼 수 있다. 리시버를 아직 등록하지 않았기 때문에 대기 상태에 있다.</p><h2 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h2><p>메시지를 받을 Receiver도 등록해보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.timpac.amqpdemo.receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> io.timpac.amqpdemo.config.OrderAmqpConfig;</span><br><span class="line"><span class="keyword">import</span> io.timpac.amqpdemo.dto.Order;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = OrderAmqpConfig.QUEUE_NAME)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;배달의 민족 주문~ : &quot;</span> + order.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RabbitListener 어노테이션을 쓰면 쉽게 리스너로 등록 가능하다</p><p>다시 POST 요청을 보내고 확인해보면 아래와 같이 메시지를 받은 것을 확인할 수 있다.<br><br/></p><p><img src="/images/refer/amqp/amqp_console.png" alt="amqp"></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://spring.io/guides/gs/messaging-rabbitmq/">https://spring.io/guides/gs/messaging-rabbitmq/</a></li><li><a href="https://www.youtube.com/watch?v=o4qCdBR4gUM">https://www.youtube.com/watch?v=o4qCdBR4gUM</a></li><li><a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html">https://www.rabbitmq.com/tutorials/tutorial-five-java.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AMQP </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell script를 이용해서 Linux monitoring page 만들기</title>
      <link href="2021/02/18/Shell-script%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-Linux-monitoring-page-%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
      <url>2021/02/18/Shell-script%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-Linux-monitoring-page-%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>서버의 CPU, MEMORY, DISK 사용량을 모니터링할 수 있는 웹 페이지를 간단히 만들어보았다.</p><ul><li>사용 Skill<br>Shell script, Crontab, dygraph.js </li><li>작업 순서<br>Shell script로 OS사용량 csv파일 생성 -&gt; 실행 스크립트를 스케줄러에 등록 -&gt; csv 파일을 차트로 출력</li></ul><h2 id="Shell-script-작성"><a href="#Shell-script-작성" class="headerlink" title="Shell script 작성"></a>Shell script 작성</h2><p><code>stat_system.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output file name</span></span><br><span class="line">CPUFILE=<span class="variable">$HOMEPAGE_ROOT</span>/performance/stat_cpu.csv</span><br><span class="line">MEMFILE=<span class="variable">$HOMEPAGE_ROOT</span>/performance/stat_mem.csv</span><br><span class="line">DSKFILE=<span class="variable">$HOMEPAGE_ROOT</span>/performance/stat_disk.csv</span><br><span class="line"></span><br><span class="line">LANG=C; <span class="built_in">export</span> LANG</span><br><span class="line">TODAY=`date <span class="string">&#x27;+%Y/%m/%d %H:%M&#x27;</span>`</span><br><span class="line">LASTYEAR=`date <span class="string">&#x27;+%Y/%m/%d&#x27;</span> -d<span class="string">&#x27;1 year ago&#x27;</span>`</span><br><span class="line"></span><br><span class="line">  sed -i <span class="string">&#x27;\|$LASTYEAR|d&#x27;</span> <span class="variable">$CPUFILE</span></span><br><span class="line">  sar 3 3 | grep Average | awk -v today=<span class="string">&quot;<span class="variable">$TODAY</span>&quot;</span> <span class="string">&#x27;&#123;print today &quot;,&quot; $3 + $5 + $6 &quot;,&quot; $3 &quot;,&quot; $5 &quot;,&quot; $6&#125;&#x27;</span> &gt;&gt; <span class="variable">$CPUFILE</span></span><br><span class="line"><span class="comment"># result(%total, %usr, %sys, %wio)</span></span><br><span class="line"></span><br><span class="line">  sed -i <span class="string">&#x27;\|$LASTYEAR|d&#x27;</span> <span class="variable">$MEMFILE</span></span><br><span class="line">  free | grep Mem | awk -v today=<span class="string">&quot;<span class="variable">$TODAY</span>&quot;</span> <span class="string">&#x27;&#123;printf &quot;%s,%.2f,%d,%d\n&quot;, today, $3 / $2 * 100, $4, $2&#125;&#x27;</span> &gt;&gt; <span class="variable">$MEMFILE</span></span><br><span class="line"><span class="comment"># result(%used, free, total kB)</span></span><br><span class="line"></span><br><span class="line">  sed -i <span class="string">&#x27;\|$LASTYEAR|d&#x27;</span> <span class="variable">$DSKFILE</span></span><br><span class="line">  df -kP | grep homepage$ | awk -v today=<span class="string">&quot;<span class="variable">$TODAY</span>&quot;</span> <span class="string">&#x27;$3 != 0 &#123;print today &quot;,&quot; $5 &quot;,&quot; $4 &quot;,&quot; $2&#125;&#x27;</span> &gt;&gt; <span class="variable">$DSKFILE</span></span><br><span class="line"><span class="comment"># result(%used, available, total kB)</span></span><br></pre></td></tr></table></figure><p>cpu, memory, disk 사용량을 파일에 추가하는 스크립트다.</p><h2 id="CSV-파일-생성"><a href="#CSV-파일-생성" class="headerlink" title="CSV 파일 생성"></a>CSV 파일 생성</h2><p>사용량을 저장할 파일들을 생성하고, 첫번째 라인에 목록명을 적어준 후 저장한다.<br><code>stat_cpu.csv</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date,total,usr,sys,wio</span><br></pre></td></tr></table></figure><p><code>stat_mem.csv</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">used,free,total kB</span><br></pre></td></tr></table></figure><p><code>stat_disk.csv</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">used,available,total kB</span><br></pre></td></tr></table></figure><p>Shell script 파일에 실행권한을 주고 여러번 실행해보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 755 stat_system.sh</span><br><span class="line">$ .&#x2F;stat_system.sh</span><br><span class="line">$ .&#x2F;stat_system.sh</span><br></pre></td></tr></table></figure><p>그럼 csv파일에 사용량이 다음과 같이 추가된다.<br><code>stat_cpu.csv</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date,total,usr,sys,wio</span><br><span class="line">2021&#x2F;01&#x2F;01 18:25,4.13,1.90,2.01,0.22</span><br><span class="line">2021&#x2F;01&#x2F;01 18:25,5.58,2.29,3.01,0.22</span><br><span class="line">2021&#x2F;01&#x2F;01 18:26,3.45,3.24,3.21,0.28</span><br></pre></td></tr></table></figure><h2 id="crontab-등록"><a href="#crontab-등록" class="headerlink" title="crontab 등록"></a>crontab 등록</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,10,20,30,40,50 * * * * &#x2F;$HOMEPAGE_ROOT&#x2F;performance&#x2F;stat_system.sh</span><br></pre></td></tr></table></figure><p>10분마다 stat_system.sh를 실행하도록 crontab에 등록한다.</p><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>csv 파일을 차트로 보기 위해서 dygraphs.js 라이브러리를 사용했다<br>아래 사이트에서 다운로드 받을 수 있다.<br><a href="https://dygraphs.com/">dygraphs</a></p><p><code>monitor.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;lib/dygraph.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">src</span>=<span class="string">&quot;lib/dygraph.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chart-cpu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:900px; height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chart-mem&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:900px; height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chart-disk&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:900px; height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Dygraph(</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;chart-cpu&quot;</span>),</span></span><br><span class="line"><span class="javascript">    <span class="string">&quot;stat_cpu.csv&quot;</span>,</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">title: <span class="string">&#x27;CPU 사용량&#x27;</span>,</span></span><br><span class="line">rollPeriod: 114</span><br><span class="line">&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Dygraph(</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;chart-mem&quot;</span>),</span></span><br><span class="line"><span class="javascript">    <span class="string">&quot;stat_mem.csv&quot;</span>,</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">title: <span class="string">&#x27;Memory 사용량&#x27;</span>,</span></span><br><span class="line">rollPeriod: 500</span><br><span class="line">&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="결과-화면"><a href="#결과-화면" class="headerlink" title="결과 화면"></a>결과 화면</h2><p>다음과 같이 날짜와 시간별 사용량을 차트로 확인할 수 있다 ^^<br><img src="/images/refer/system-monitor.png" alt="monitor"><em>모니터링 페이지 스크린샷</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell script </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>잘못된 synchronized 사용 사례</title>
      <link href="2021/02/08/%EC%9E%98%EB%AA%BB%EB%90%9C-synchronized-%EC%82%AC%EC%9A%A9-%EC%82%AC%EB%A1%80/"/>
      <url>2021/02/08/%EC%9E%98%EB%AA%BB%EB%90%9C-synchronized-%EC%82%AC%EC%9A%A9-%EC%82%AC%EB%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="SCENARIO"><a href="#SCENARIO" class="headerlink" title="SCENARIO"></a>SCENARIO</h2><p>하루에 10명만 받아야하는 신청프로그램 개발건이 들어왔다.<br>초보 개발자 김삽질씨는 나름 열심히 고민해서 프로그래밍했다<br>“신청자가 10명이 넘으면 안되니까 신청자가 몇명인지 조회하고 10명 이상이면 신청이 안되게 해야겠다~”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicantManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Integer&gt; applicantList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLICANT_LIMIT = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applicate</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(applicantList.size() &lt; APPLICANT_LIMIT) &#123;</span><br><span class="line">            applicantList.add(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getApplicantList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicantList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>개발이 끝나고 신청 당일날 고객한테 전화가 왔다.</p><p>“총 신청자가 12명인대요?”</p><blockquote><p>헬게이트가 열렸다 ㄷㄷㄷ</p></blockquote><p><img src="/images/fail.jpg" alt="망함"></p><p>김삽질씨는 왜 초과신청이 되었는지 알수가 없어 선배 개발자에게 물어보았다. 돌아온 대답은..</p><p>“동시에 신청 못하게 동기화를 시켜줘야돼~”</p><p>선배말을 듣고 동기화에 대해 알아본 후 Java엔 synchronized라는게 있는걸 알게됐다.<br>그리고 야심차게 코드를 수정한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicantManager</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">applicate</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(applicantList.size() &lt; APPLICANT_LIMIT) &#123;</span><br><span class="line">            applicantList.add(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 다음날 총 신청자 수는…<br><br><br><br>11명이었다…</p><p><img src="/images/run.jpg" alt="도망"></p><p>뭐가 잘못된걸까? 분명 applicate() 메서드를 동기화해서 동시접근을 막았는데..<br>김삽질씨는 synchronized에 대해 더 자세히 알아보았고 결국 문제점을 알게되었다.<br>다음은 ApplicantManager를 호출하는 부분이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicantManager mananger = <span class="keyword">new</span> ApplicantManager();</span><br><span class="line">mananger.applicate(id);</span><br></pre></td></tr></table></figure><p>호출할 때마다 ApplicantManager의 새로운 인스턴스를 만들고 있다.<br>그런데 메서드 synchronized는 lock의 기준을 인스턴스로 한다는 사실을 몰랐던 것이다.<br>서로 다른 인스턴스간에는 동기화가 될리가 없었다. 중요한 깨닮음을 얻고 다시 코드를 수정했다.<br>방법은 세가지다.</p><ul><li>ApplicantManager를 싱글톤으로 만드는 방법</li><li>메서드에 static synchronized 거는 방법 </li><li>synchronized 블록을 이용하는 방법</li></ul><p>synchronized 블록을 선택했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicantManager</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applicate</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(ApplicantManager.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(applicantList.size() &lt; APPLICANT_LIMIT) &#123;</span><br><span class="line">                applicantList.add(id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 다음날부터는 10명을 넘지않았다는 훈훈한(?) 이야기다 ^^<br><br></p><blockquote><p>이젠 정말로 Thread-safe 해진걸까?<br> 불행히도 아직 잠재적인 문제가 남아있다.<br>ApplicantManager의 getApplicantList() 메서드가 public이라서 applicantList의 값이 외부에서 변경될 소지가 있다. applicantList를 외부로부터 감추자!<br><br>또 하나의 문제점은 synchronized의 인자를 ApplicantManager.class로 하고 있다는 점이다.<br>만약에 관리자가 임의로 신청을 입력하는 기능이 추가되어 ApplicantAdminManager를 만들고<br>신청자를 추가하는 메서드를 만든다면 또 초과 신청이 발생할 수 있다.<br> synchronized(applicantList)로 바꿔주자!</p></blockquote><h2 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h2><p>위의 시나리오를 테스트해보자. 동시요청을 가정하기 위해서 3개의 쓰레드를 돌려 10번씩 신청했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Runnable applicateTask = () -&gt; &#123;</span><br><span class="line">            ApplicantManager mananger = <span class="keyword">new</span> ApplicantManager();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">                mananger.applicate(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(applicateTask);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(applicateTask);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(applicateTask);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join(<span class="number">5</span>);</span><br><span class="line">            t2.join(<span class="number">5</span>);</span><br><span class="line">            t3.join(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;총 신청자 인원 : &quot;</span> + ApplicantManager.getApplicantList().size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4가지 상황별로 10번씩 실행한 결과는 다음과 같다.</p><table><thead><tr><th></th><th align="center">not use synchronized</th><th align="center">method synchronized</th><th align="center">synchronized block</th><th align="center">Singleton Pattern</th></tr></thead><tbody><tr><td>총 신청 인원</td><td align="center">10</td><td align="center">12</td><td align="center">10</td><td align="center">10</td></tr><tr><td>총 신청 인원</td><td align="center">12</td><td align="center">12</td><td align="center">10</td><td align="center">10</td></tr><tr><td>총 신청 인원</td><td align="center">11</td><td align="center">12</td><td align="center">10</td><td align="center">10</td></tr><tr><td>총 신청 인원</td><td align="center">10</td><td align="center">12</td><td align="center">10</td><td align="center">10</td></tr><tr><td>총 신청 인원</td><td align="center">12</td><td align="center">11</td><td align="center">10</td><td align="center">10</td></tr><tr><td>총 신청 인원</td><td align="center">12</td><td align="center">12</td><td align="center">10</td><td align="center">10</td></tr><tr><td>총 신청 인원</td><td align="center">12</td><td align="center">11</td><td align="center">10</td><td align="center">10</td></tr><tr><td>총 신청 인원</td><td align="center">12</td><td align="center">12</td><td align="center">10</td><td align="center">10</td></tr><tr><td>총 신청 인원</td><td align="center">12</td><td align="center">10</td><td align="center">10</td><td align="center">10</td></tr><tr><td>총 신청 인원</td><td align="center">12</td><td align="center">12</td><td align="center">10</td><td align="center">10</td></tr></tbody></table><p>synchronized를 안쓰거나 잘못사용한 경우 대부분 10명이 넘게 신청되었다.<br><br></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>위 시나리오에서 Thread-safe하지 않은 근본원인은 static 필드를 사용하기 때문이다.<br>Servlet기반의 Java웹서버들은 기본적으로 사용자의 요청을 병렬적으로 처리하지만<br>대부분 1 request 당 1 thread이고 독립적인 context에서 쓰레드가 실행되기 때문에 문제될게없다.<br>하지만 static이나 상태를 가지고 있는 singleton 객체는 멀티스레드에서 공유될 수 있기 때문에 Thread-safe한지 고려해야한다.<br>Thread-safe한 변수만 두면 된다는 단순한 규칙만으로도 많은 문제를 예방할 수 있고,<br>java.util.concurrent 패키지의 객체사용도 고려해보면 좋겠다</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Parallel Programming </tag>
            
            <tag> Practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ForkJoin Framework in Java</title>
      <link href="2021/02/02/ForkJoin-Framework-in-Java/"/>
      <url>2021/02/02/ForkJoin-Framework-in-Java/</url>
      
        <content type="html"><![CDATA[<h2 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h2><ul><li>java.util.concurrent.ExecutorService의 구현체로 병렬 프로그래밍을 지원</li><li>Fork Join 의미<ul><li>Fork : 쓰레드를 여러개로 분할</li><li>Join : 포크해서 실행한 스레드의 결과를 취합</li><li>하나의 큰 작업을 여려개의 작업(쓰레드)으로 분할하여 실행시킨다</li></ul></li><li>주요 클래스<ul><li>ForkJoinPool : 등록된 태스크를 관리하는 쓰레드 풀</li><li>RecursiveTask - 실제 실행될 작업인 compute 메서드를 구현한다. 리턴값 있음</li><li>RecursiveAction - RecursiveTask와 같지만 리턴값이 없음</li></ul></li><li>장점 <ul><li>노는 스레드가 다른 스레드의 작업을 가져와 처리하여 효율을 증대시킨다.</li></ul></li></ul><p><img src="/images/refer/forkjointree.png" alt="ForkJoin"><em>ForkJoin 개념도</em></p><blockquote><p>하나의 작업을 분할(Fork)하고 분할된 하위 Task들의 작업이 완료될 때까지 기다린 후에 병합(Join)하여 최종 결과를 내는 방법이다.<br> 위 그림을 보면 분할 정복 알고리즘과 비슷하다. 차이점은 forkjoin은 병렬로 작업이 수행된다는 점이다. 또한 Work stealing Algorithm을 사용한다는 것.<br> 하나의 쓰레드가 작업을 다 처리하고 더 이상 할 일이 없으면 inbound-queue나 다른 쓰레드의 queue에서 할 일을 가져와서 수행하는 알고리즘이다.<br> 그리하여 CPU 유휴시간이 줄어들게된다. 직원이 노는 꼴은 못 보는 사장 마인드 ㅋㅋ</p></blockquote><p><img src="/images/workinghard.jpg" alt="일해라"><em>일해라~ CPU야</em></p><h2 id="성능테스트"><a href="#성능테스트" class="headerlink" title="성능테스트"></a>성능테스트</h2><p>다음은 ForkJoin을 이용한 숫자의 합계를 구하는 클래스다<br>RecursiveTask를 상속받아 compute() 메서드를 구현해주면된다.<br>리스트의 크기가 THRESHOLD 보다 작거나 같으면 바로 합계를 구하고 크면 재귀적으로 계속 이등 분할한 후 조인한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THRESHOLD = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">private</span> List&lt;Long&gt; data;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SumTask</span><span class="params">(List&lt;Long&gt; data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(data.size() &lt;= THRESHOLD) &#123;</span><br><span class="line"><span class="keyword">for</span>(Long number : data) &#123;</span><br><span class="line">sum += number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> mid = data.size() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">SumTask firstTask = <span class="keyword">new</span> SumTask(data.subList(<span class="number">0</span>, mid));</span><br><span class="line">SumTask secondTask = <span class="keyword">new</span> SumTask(data.subList(mid, data.size()));</span><br><span class="line">firstTask.fork();   </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> secondTask.compute() + firstTask.join(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>성능을 비교하기 위해 3가지 방식의 메서드를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//forkjoin 방식</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">testForkJoin</span><span class="params">(List&lt;Long&gt; data)</span> </span>&#123;</span><br><span class="line">  ForkJoinPool pool = ForkJoinPool.commonPool();</span><br><span class="line">  <span class="keyword">return</span> pool.invoke(<span class="keyword">new</span> SumTask(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//절차적 방식</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">testSequential</span><span class="params">(List&lt;Long&gt; data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(Long number : data) &#123;</span><br><span class="line">    sum += number;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parallel Stream 방식</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">testStream</span><span class="params">(List&lt;Long&gt; data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> data.parallelStream().reduce(<span class="number">0L</span>, Long::sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 코드는 다음과 같다. 천만개의 랜덤 숫자를 더하는 연산이다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    List&lt;Long&gt; randomData = random.longs(<span class="number">10000000</span>, <span class="number">1</span>, <span class="number">5</span>).boxed().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> sum = testForkJoin(randomData);</span><br><span class="line">    <span class="comment">//long sum = testSequential(randomData);</span></span><br><span class="line">    <span class="comment">//long sum = testStream(randomData);</span></span><br><span class="line"></span><br><span class="line">    System.out.printf(<span class="string">&quot;sum : %s, execute %s(ms)\n&quot;</span>, sum, System.currentTimeMillis() - startTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="성능테스트-결과"><a href="#성능테스트-결과" class="headerlink" title="성능테스트 결과"></a>성능테스트 결과</h2><p>포크조인 방식은 threshold에 따른 성능을 알기 위해 3가지로 나눠서 실행해봤다.<br>각각 5번씩 실행해 평균속도를 구했다.</p><table><thead><tr><th></th><th>ForkJoin<br>1000</th><th>ForkJoin<br>10000</th><th>ForkJoin<br>100000</th><th>sequential</th><th>parallelStream</th></tr></thead><tbody><tr><td>평균 실행 시간(ms)</td><td>37.4</td><td>31.8</td><td>38</td><td>96.8</td><td>140.6</td></tr></tbody></table><p>평균적으로 ForkJoin방식이 더 빠르게 나왔다.<br>하지만 작업단위의 처리량과 PC의 성능에따라 오히려 ForkJoin방식이 느려질 수도 있으니 주의해서 사용해야한다.<br>작업을 나누는 기준과 방법을 적절히 정해야 효율적인 성능이난다.</p><h2 id="언제-사용할까"><a href="#언제-사용할까" class="headerlink" title="언제 사용할까?"></a>언제 사용할까?</h2><p>단순 연산 외에도 void형인 RecursiveAction를 이용해 여러가지 작업을할 수 있을거 같다.<br>디렉토리를 재귀적으로 탐색하는 작업이나.. 루트 웹페이지부터 링크를 따라 크롤링하는 작업 등에 사용하면 좋을거란 생각이든다.<br>다음은 디렉토리의 용량을 계산하는 예제이다.<br>루트패스로부터 시작해서 해당파일이 디렉토리인지 파일인지 판단하여 디렉토리라면 작업을 분할하여 재귀처리하고, 파일이면 크기를 리턴한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDirSize</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Path path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ForkJoinDirSize</span><span class="params">(Path path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.path = path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> fileSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Files.isDirectory(path)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;Path&gt; fileList = Files.list(path).collect(Collectors.toList());</span><br><span class="line">List&lt;ForkJoinDirSize&gt; subTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Path file : fileList) &#123;</span><br><span class="line">ForkJoinDirSize subTask = <span class="keyword">new</span> ForkJoinDirSize(file);</span><br><span class="line">subTask.fork();</span><br><span class="line">subTaskList.add(subTask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Long subSize = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span>(ForkJoinDirSize subTask : subTaskList) &#123;</span><br><span class="line">subSize += subTask.join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> subSize;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileSize = Files.size(path);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fileSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Path path = Paths.get(<span class="string">&quot;C:\Program Files&quot;</span>);</span><br><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">System.out.printf(<span class="string">&quot;합계: %s\n&quot;</span>, pool.invoke(<span class="keyword">new</span> ForkJoinDirSize(path)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p>[책] Practical 모던 자바 - 장윤기</p><p><a href="https://www.pluralsight.com/guides/introduction-to-the-fork-join-framework">https://www.pluralsight.com/guides/introduction-to-the-fork-join-framework</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> ForkJoin </tag>
            
            <tag> Parallel Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>예약가능시간 조회 SQL query</title>
      <link href="2021/01/27/%EC%98%88%EC%95%BD%EA%B0%80%EB%8A%A5%EC%8B%9C%EA%B0%84-%EC%A1%B0%ED%9A%8C-SQL-query/"/>
      <url>2021/01/27/%EC%98%88%EC%95%BD%EA%B0%80%EB%8A%A5%EC%8B%9C%EA%B0%84-%EC%A1%B0%ED%9A%8C-SQL-query/</url>
      
        <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>예약 시스템 개발건이 들어와서 고객과 업무협의를 했다.<br>요구사항 중 하나가 사용자 신청화면 달력에서 신청가능한 시간이 하나라도 있으면 ‘신청가능’ 버튼을 달력에 보여주고 모두 완료되었으면 ‘예약마감’이라고 보여달라는 것이였다.<br>해당 요구 사항은 다음과 같다.</p><h2 id="요구사항"><a href="#요구사항" class="headerlink" title="요구사항"></a>요구사항</h2><ul><li>오늘기준 내일부터 15일 이후까지 신청가능(토요일, 일요일 제외)</li><li>신청가능 시간은 09:20분 ~ 17:40분 20분 단위 (09:20, 09:40, 10:00, …. 17:40)</li><li>점심시간 제외 (12:00, 12:20, 12:40)</li><li>목요일은 16:40 까지만 신청가능 (17:00, 17:20, 17:40 제외)</li><li>관리자가 추가로 특정 신청 시간을 비활성화할 수 있음</li><li>신청 시간당 한명만 신청가능</li></ul><h2 id="분석"><a href="#분석" class="headerlink" title="분석"></a>분석</h2><p>20분 단위 신청가능 시간은 변동될 일이 없다고했고 시간을 관리자가 따로 입력하지않기 때문에<br>신청가능 시간을 디폴트로 생성하고 추가로 비활성화한 시간만 막는 방식으로 개발하기로했다.<br>그리고 달력에 ‘신청가능’ or ‘예약마감’ 을 표시하기위해 어떻게 해야할까 깊은 고민에 빠지게됐다</p><p><img src="/images/gorapaduck.jpg" alt="고민"><em>점심시간이랑… 목요일이 어쩌구.. 관리자가 추가를…</em></p><h2 id="개발"><a href="#개발" class="headerlink" title="개발"></a>개발</h2><ul><li>고민 끝에 날짜별로 신청가능한 시간만 DB query로 가져오기로 정했다. </li></ul><p>먼저 기본 신청가능 시간테이블(BASE_TIME)과 관리자 비활성 시간을 담는 테이블(BLOCK_DATE)을 만든다.<br>DBMS는 Oracle이다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BLOCK_DATE (</span><br><span class="line">    &quot;BLOCKDATE&quot; VARCHAR2(<span class="number">8</span> BYTE), </span><br><span class="line">    &quot;BLOCKTIME&quot; VARCHAR2(<span class="number">5</span> BYTE)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BASE_TIME (&quot;BASETIME&quot; VARCHAR2(<span class="number">5</span> BYTE) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ENABLE);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASETIME <span class="keyword">VALUES</span> (<span class="string">&#x27;09:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASETIME <span class="keyword">VALUES</span> (<span class="string">&#x27;09:40&#x27;</span>);</span><br><span class="line"><span class="operator">~</span><span class="operator">~</span><span class="operator">~</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASETIME <span class="keyword">VALUES</span> (<span class="string">&#x27;17:40&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>계층쿼리를 이용해 15일간의 날짜 테이블을 만든다. 목요일 조건을 검색하기위해 요일정보도 같이 셀렉트했다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_CHAR(FIRST_DAY<span class="operator">+</span>LEVEL,<span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="keyword">AS</span> DATES, TO_CHAR(FIRST_DAY<span class="operator">+</span>LEVEL,<span class="string">&#x27;D&#x27;</span>) <span class="keyword">AS</span> DY </span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> to_date(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) FIRST_DAY <span class="keyword">FROM</span> DUAL) </span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> FIRST_DAY<span class="operator">+</span>LEVEL <span class="operator">&lt;=</span> FIRST_DAY <span class="operator">+</span> <span class="number">15</span> </span><br></pre></td></tr></table></figure><p>?에 바인딩되는 값은 오늘 날짜다(YYYYMMDD)<br>‘20210122’를 넣으면 아래와 같이 결과가 나온다.</p><table><thead><tr><th align="center">DATES</th><th>DY</th></tr></thead><tbody><tr><td align="center">20210123</td><td>7</td></tr><tr><td align="center">20210124</td><td>1</td></tr><tr><td align="center">20210125</td><td>2</td></tr><tr><td align="center">…</td><td>…</td></tr><tr><td align="center">20210206</td><td>7</td></tr></tbody></table><p>날짜 테이블과 기본시간 테이블을 조인하고 점심시간과, 토,일요일 제외하고, 목요일 조건도 빼주자.<br>위에서 만든 날짜와 시간 테이블을 with절로 정의해서 조인했다.<br>그다음 신청테이블에서 이미 신청된 시간과 관리자가 비활성화한 시간을 가져와서 제외시키면된다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> BASEDATE <span class="keyword">AS</span> ( </span><br><span class="line">    <span class="keyword">SELECT</span> TO_CHAR(FIRST_DAY<span class="operator">+</span>LEVEL,<span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="keyword">AS</span> DATES, TO_CHAR(FIRST_DAY<span class="operator">+</span>LEVEL,<span class="string">&#x27;D&#x27;</span>) <span class="keyword">AS</span> DY </span><br><span class="line">    <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> to_date(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) FIRST_DAY <span class="keyword">FROM</span> DUAL) </span><br><span class="line">    <span class="keyword">CONNECT</span> <span class="keyword">BY</span> FIRST_DAY<span class="operator">+</span>LEVEL <span class="operator">&lt;=</span> FIRST_DAY <span class="operator">+</span> <span class="number">15</span> </span><br><span class="line">), </span><br><span class="line">AVAILABLE_TIME <span class="keyword">AS</span> ( </span><br><span class="line">    <span class="keyword">SELECT</span> DATES, BASETIME <span class="keyword">AS</span> TIMES  </span><br><span class="line">    <span class="keyword">FROM</span> BASEDATE, BASE_TIME </span><br><span class="line">    <span class="keyword">WHERE</span> DY <span class="operator">!=</span> <span class="number">1</span> <span class="keyword">AND</span> DY <span class="operator">!=</span> <span class="number">7</span> <span class="keyword">AND</span> DY <span class="operator">!=</span> <span class="number">5</span> <span class="keyword">OR</span> (DY <span class="operator">=</span> <span class="number">5</span> <span class="keyword">and</span> BASETIME <span class="keyword">NOT</span> <span class="keyword">IN</span> (?))</span><br><span class="line">), </span><br><span class="line">BLOCK_TIME <span class="keyword">AS</span> ( </span><br><span class="line">    <span class="keyword">SELECT</span> reservation_date <span class="keyword">AS</span> DATES, reservation_time <span class="keyword">AS</span> TIMES <span class="keyword">FROM</span> 신청테이블  </span><br><span class="line">    <span class="keyword">WHERE</span> reservation_date <span class="keyword">BETWEEN</span> TO_DATE(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AND</span> TO_DATE(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="operator">+</span> <span class="number">15</span> </span><br><span class="line">    <span class="keyword">UNION</span> </span><br><span class="line">    <span class="keyword">SELECT</span> blockdate <span class="keyword">AS</span> DATES, blocktime <span class="keyword">AS</span> TIMES <span class="keyword">FROM</span> BLOCK_DATE </span><br><span class="line">    <span class="keyword">WHERE</span>  blockdate <span class="keyword">BETWEEN</span> TO_DATE(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AND</span> TO_DATE(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="operator">+</span> <span class="number">15</span> </span><br><span class="line">) </span><br><span class="line">        </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> AVAILABLE_TIME  </span><br><span class="line">MINUS  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> BLOCK_TIME</span><br></pre></td></tr></table></figure><ul><li>AVAILABLE_TIME의 WHERE절</li></ul><p>DY != 1 AND DY != 7 – 토요일, 일요일은 제외</p><p>DY != 5 OR (DY = 5 and BASETIME NOT IN (?))  – 목요일인 경우 추가시간 제외</p><p>? 에 바인딩되는 목요일 제외시간은 Java Class에 정의했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlocktimeUtil</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; THURSDAY_BLOCK_TIME = Arrays.asList(<span class="string">&quot;17:00&quot;</span>, <span class="string">&quot;17:20&quot;</span>, <span class="string">&quot;17:40&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getThursDayBlockTimeStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> THURSDAY_BLOCK_TIME.stream().map(s -&gt; <span class="string">&quot;&#x27;&quot;</span> +s+ <span class="string">&quot;&#x27;&quot;</span>).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과는….?? SUCCESS ㅎㅎㅎ</p><table><thead><tr><th align="center">DATE</th><th align="center">TIMES</th></tr></thead><tbody><tr><td align="center">20210123</td><td align="center">09:20</td></tr><tr><td align="center">20210123</td><td align="center">09:40</td></tr><tr><td align="center">20210125</td><td align="center">14:20</td></tr><tr><td align="center">20210125</td><td align="center">14:40</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="더-생각해볼-것"><a href="#더-생각해볼-것" class="headerlink" title="더 생각해볼 것"></a>더 생각해볼 것</h2><p>해놓고 보니 아직 데이터베이스 중심의 사고방식에서 벗어나지 못한 것 같다.<br>JPA를 사용하면 비즈니스 로직을 JAVA에서 객체지향적으로 프로그래밍할 수 있을지 커스터마이징 해봐야겠다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 실무 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transaction Isolation Levels in Oracle</title>
      <link href="2021/01/15/Transaction-Isolation-Levels/"/>
      <url>2021/01/15/Transaction-Isolation-Levels/</url>
      
        <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p> 개발을 하다보면 동시성과 일관성에 대해서 한번쯤 생각하게된다.<br> 동시성을 높이면 일관성이 떨어지고, 일관성을 높이면 동시성이 떨어진다.. 그러면 어느정도의 레벨로 맞춰야할까 언제 동시성을 높이고 언제 일관성을 높여야 할까??<br> 이런생각 중에 오라클에서는 동시성 제어와 읽기 일관성을 유지를 어떻게 하는지 궁금해져서 오라클 문서와 블로그등을 참고해서 정리해보았다<br> 동작원리를 이해하기 위해선 먼저 Transaction Isolation Levels을 알아야한다.</p><h2 id="Transaction-Isolation-Levels"><a href="#Transaction-Isolation-Levels" class="headerlink" title="Transaction Isolation Levels"></a>Transaction Isolation Levels</h2><p>ANSI/ISO 표준에서 Transaction Isolation Levels을 다음 4가지로 정의하고있다.</p><ul><li>READ UNCOMMITTED</li><li>READ COMMITTED</li><li>REPEATABLE READ</li><li>SERIALIZABLE</li></ul><h3 id="1-READ-UNCOMMITTED"><a href="#1-READ-UNCOMMITTED" class="headerlink" title="1. READ UNCOMMITTED"></a>1. READ UNCOMMITTED</h3><p> 다른 트랜잭션의 변경내용이 커밋하지 않아도 보여진다.<br> 예를 들어 다음과 같은 Account 테이블이 있다고 가정하자</p><table><thead><tr><th>row</th><th>id</th><th>balance</th></tr></thead><tbody><tr><td>1</td><td>123</td><td>10000</td></tr><tr><td>2</td><td>222</td><td>30000</td></tr><tr><td>3</td><td>333</td><td>50000</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><p><em>[table1. Account 테이블]</em></p><p>그리고 다음과 같은 시나리오를 생각해보자.</p><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">select balance from Account where id = ‘123’</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">update Account set balance = balance + 10000 where id = ‘123’</td></tr><tr><td>T3</td><td align="center">select balance from Account where id = ‘123’</td><td align="center">-</td></tr><tr><td>T4</td><td align="center">-</td><td align="center">commit;</td></tr></tbody></table><p><em>[table2. 트랜잭션 시나리오 1]</em></p><p>A 트랜잭션이 실행되는 중간에 다른 세션에서 update를 하고 커밋을 하지 않았다.<br>transaction A의 T1에서 조회한 값과 T3에서 조회한 balance값은 어떻게 나올까?<br>결과는 T1 = 10000, T3 = 20000 이다.<br>이렇게 실시간으로 다른 트랜잭션의 커밋되지않은 변경이 보여지는 현상을 <strong>Dirty read</strong>라고 한다.<br>동시성이 좋지만 일관성을 전혀 보장하지 못한다.</p><h3 id="2-READ-COMMITTED"><a href="#2-READ-COMMITTED" class="headerlink" title="2. READ COMMITTED"></a>2. READ COMMITTED</h3><p>다른 트랜잭션의 변경내용이 커밋되어야 보여진다.<br>READ COMMITTED 레벨에서 [table2. 트랜잭션 시나리오 1]이 시행되면 똑같은 T1 = 10000, T3 = 10000 값을 얻을 수있다. 커밋을 하지 않았기 때문이다.<br>하지만 B 트랜잭션에서 커밋을하게되면 역시 바뀐값을 읽게된다.<br>이러한 현상을 <strong>Nonrepeatable read</strong>라한다. 하나의 트랜잭션안에서는 같은 쿼리를 수행했을 때 항상 같은 값을 가져야한다는 read consistent에 부합되는 현상이다.</p><h3 id="3-REPEATABLE-READ"><a href="#3-REPEATABLE-READ" class="headerlink" title="3. REPEATABLE READ"></a>3. REPEATABLE READ</h3><p>REPEATABLE READ 레벨에선 Dirty read와 Nonrepeatable read가 없다.<br>커밋을해도 T1,T3결과가 모두 10000으로 조회되어 read consistent를 보장한다.<br>하지만 <strong>Phantom READ</strong>를 허용한다. Phantom READ의 예제 시나리오는 다음과 같다.</p><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">select count(*) from Account</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">insert into Account values (4, 1000) <br>commit;</td></tr><tr><td>T3</td><td align="center">select count(*) from Account</td><td align="center">-</td></tr></tbody></table><p><em>[table3. 트랜잭션 시나리오 2]</em></p><p>T1에서의 결과보다 T3의 조회한 카운트가 하나더 증가해서 나온다. 이런현상을 <strong>Phantom READ</strong>라한다</p><blockquote><p>유령(Phantom)이 나타났다 ㄷㄷㄷ</p></blockquote><h3 id="4-SERIALIZABLE"><a href="#4-SERIALIZABLE" class="headerlink" title="4. SERIALIZABLE"></a>4. SERIALIZABLE</h3><p>가장 강한 격리 레벨로 정합성을 보장하지만 하나의 트랜잭션의 끝날때까지 다른트랜잭션이 접근을 못해서 성능 저하가 발생할 수 있다. Dead Lock 가능성도 있음</p><p>다음은 isolation levels permit 요약표다</p><table><thead><tr><th>Isolation Level</th><th align="center">Dirty Read</th><th align="center">Nonrepeatable Read</th><th align="center">Phantom Read</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td align="center">Permitted</td><td align="center">Permitted</td><td align="center">Permitted</td></tr><tr><td>READ COMMITTED</td><td align="center">–</td><td align="center">Permitted</td><td align="center">Permitted</td></tr><tr><td>REPEATABLE READ</td><td align="center">–</td><td align="center">–</td><td align="center">Permitted</td></tr><tr><td>SERIALIZABLE</td><td align="center">–</td><td align="center">–</td><td align="center">–</td></tr></tbody></table><p><em>[table4. isolation levels]</em></p><h2 id="Data-Concurrency-and-Consistency-in-Oracle"><a href="#Data-Concurrency-and-Consistency-in-Oracle" class="headerlink" title="Data Concurrency and Consistency in Oracle"></a>Data Concurrency and Consistency in Oracle</h2><p>그렇다면 오라클 DBMS에서는 어떤 트랜잭션 격리 레벨을 사용하고 있으며 어떻게 데이터 동시성과 일관성을 보장할까?<br>오라클은 기본적으로 READ COMMITTED 레벨로 설정되어있으며, 동시성 제어를 위해 MVCC매커니즘을 사용하고있다.</p><p>[table2. 트랜잭션 시나리오 1]을 다시보고 오라클 기본설정인 READ COMMITTED에서는 어떻게 동작할 지 생각해보자.<br>일단 MVCC가 뭔지 모르니 MVCC를 사용하지 않는 DBMS와 어떻게 다르게 동작하는지 알아보자</p><ol><li>일반적인 Lock을 사용한 제어에서 [table2. 트랜잭션 시나리오 1]</li></ol><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">balance = 10000을 읽음</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">row 하나를 업데이트를 하고 exclusive lock을 건다</td></tr><tr><td>T3</td><td align="center">exclusive lock이 걸려있어서 block되고 wait함<br>B transaction이 끝나면 balance = 20000을 읽음</td><td align="center">-</td></tr><tr><td>T4</td><td align="center">-</td><td align="center">commit;</td></tr></tbody></table><p>B에서 update한 순간 lock이걸리고 exclusive lock이기 때문에 T3시간에서는 접근을 못한다.<br>B에서 commit을 하면 lock이 풀리고 그후에 row를 읽어온다.</p><ol start="2"><li>MVCC를 사용한 제어에서 [table2. 트랜잭션 시나리오 1]</li></ol><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">해당 로우를 포함한 블록을 복사해서 따로 저장해놓는다<br>balance = 10000을 읽음</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">row 하나를 업데이트를 하고 exclusive lock을 건다</td></tr><tr><td>T3</td><td align="center">복사한 버전에서 balance = 10000을 읽음</td><td align="center">-</td></tr><tr><td>T4</td><td align="center">-</td><td align="center">commit;</td></tr></tbody></table><p>T1에서 A는 쿼리가 시작하는 시점에서 해당 row를 포함한 블록을 새로 만들어 임시 저장해놓는다. 일종의 snapshot이다<br>그리고 트랜잭션이 끝날때까지 그것만 읽게된다.<br>T2에서 B가 update문을 실행하면서 exclusive lock이 걸리지만 T3에서 A는 복사된 블록을 읽기때문에 B가 완료되지 않아도 접근이 가능한 것이다. T4에서 B가 commit하면 업데이트된 값으로 새로운 버전의 블록을 생성한다.<br>이렇게 하나의 데이터에 대해 여러 버전의 데이터가 존재하는 구조로 만드는 방식을 MVCC(Multi-Version Concurrency Control)라고한다.</p><blockquote><p>너무 어렵다…ㅠㅠ 이해를 돕기위해 예시를 들어보자</p></blockquote><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">select balance from account where id=’123’</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">update account set balance=balance+20000 where id=’123’</td></tr><tr><td>T3</td><td align="center">update account set balance=balance+10000 where id=’123’</td><td align="center">-</td></tr><tr><td>T4</td><td align="center">-</td><td align="center">commit;</td></tr><tr><td>T5</td><td align="center">commit;</td><td align="center">-</td></tr></tbody></table><p><em>[table5. 트랜잭션 시나리오 3]</em></p><blockquote><p>이쯤에서 퀴즈~~ ^^ 위의 시나리오에서 최종 업데이트된 balance 값은??</p></blockquote><p><img src="/images/gorapaduck.jpg" alt="혼란"><em>20000? 30000?? 40000???</em></p><p>차례대로 천천히 살펴보자<br>T1 - 트랜잭션이 시작되고 CR Block(복사본)을 만든다<br>T2 - id=’123’ row를 업데이트하고 exclusive lock을건다<br>T3 - update문은 read component(where절) + write component(set절)로 나뉘는데..<br>    read는 CR Block에서 가져오기때문에 처음 시작 때 id=’123’을 선택한다. 하지만 update set절은 write이기 때문에 exclusive lock에 걸리게된다..<br>    간단히 말해 DML은 MVCC적용이 안된다. 고로 대기상태가 됨<br>T4 - B가 커밋 후에 A는 update를 수행한다. 이 때 balance+10000의 balance는 업데이트된 멀티비전을 읽으므로 30000 + 10000 결과는 40000이된다.</p><h3 id="READ-ONLY"><a href="#READ-ONLY" class="headerlink" title="READ ONLY"></a>READ ONLY</h3><p>오라클에는 추가적인 transaction isolation level인 READ ONLY를 제공한다.<br>일관성이 더 높은 레벨이다. ANSI표준으로 치면 REPEATABLE READ와 같고, SERIALIZABLE에서 수정만 금지한 레벨이다<br>예약시스템같은 엄격하게 동시성을 제어하고 싶을 때 사용할 수 있겠다. statement에서 사용하려면 select … for update 구문으로 쓰면된다.</p><h2 id="3줄요약"><a href="#3줄요약" class="headerlink" title="3줄요약"></a>3줄요약</h2><ul><li>ANSI/ISO Standard Transaction Isolation Levels은 4가지가 있다 (READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE)</li><li>오라클은 read는 MVCC, write는 Lock으로 제어하여 READ COMMITTED Level을 구현한다</li><li>READ ONLY, SERIALIZABLE은 신중히 사용하자</li></ul><p><img src="/images/understand.jpg" alt="이해했어"></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://docs.oracle.com/cd/B10501_01/server.920/a96524/c21cnsis.htm">https://docs.oracle.com/cd/B10501_01/server.920/a96524/c21cnsis.htm</a></li><li><a href="https://blogs.oracle.com/oraclemagazine/on-transaction-isolation-levels">https://blogs.oracle.com/oraclemagazine/on-transaction-isolation-levels</a></li><li><a href="http://wiki.gurubee.net/pages/viewpage.action?pageId=27428238">http://wiki.gurubee.net/pages/viewpage.action?pageId=27428238</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> Reference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMTP 제목 인코딩 오류 Troubleshooting</title>
      <link href="2021/01/13/SMTP-%EC%A0%9C%EB%AA%A9-%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%98%A4%EB%A5%98-Troubleshooting/"/>
      <url>2021/01/13/SMTP-%EC%A0%9C%EB%AA%A9-%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%98%A4%EB%A5%98-Troubleshooting/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><ul><li>유지보수하는 어플리케이션에서 메일서버 API를 사용하고 있었는데 어느날부터 메일 제목이 깨져서 발송되는 문제가 발생했다.<br>이리저리 삽질 끝에 문제를 해결했는데 도움이 될까 남겨본다.</li></ul><h2 id="분석"><a href="#분석" class="headerlink" title="분석"></a>분석</h2><h3 id="1-SMTP-FORMAT"><a href="#1-SMTP-FORMAT" class="headerlink" title="1. SMTP FORMAT"></a>1. SMTP FORMAT</h3><p> 발송된 메일의 제목을 확인해보니 아래와 같이 나왔다<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;?UTF-8?B?7TAGM6Iqk5Yq2OSDHsydvOyeheuLuhC4&#x3D;</span><br></pre></td></tr></table></figure><br>SMTP의 subject format은 다음과 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;?[charset]?[인코딩타입]?[인코딩된 제목]?&#x3D;</span><br></pre></td></tr></table></figure><blockquote><p>왜 디코딩이 안됐을까… 하고 한참 보다가 뒤에 물음표 빠진것 발견 ^^</p></blockquote><h3 id="2-eml-Test"><a href="#2-eml-Test" class="headerlink" title="2. eml Test"></a>2. eml Test</h3><p>왜 빠진걸까?<br><br>일단 eml 파일을 만들어 테스트 해봤다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ImMessage message = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        Session session = Session.getDefaultInstance(props); </span><br><span class="line">        message = <span class="keyword">new</span> ImMessage( session );</span><br><span class="line">        message.setCharset(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        message.setFrom(<span class="string">&quot;&quot;</span>, <span class="string">&quot;timpac61@gmail.com&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        message.setSubjectEncode(<span class="string">&quot;테스트 메일입니다.&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        message.setPriority(<span class="number">3</span>);</span><br><span class="line">        message.setHtml(<span class="string">&quot;테스트&quot;</span>);</span><br><span class="line">        message.setRecipientsEx(javax.mail.Message.RecipientType.TO, <span class="string">&quot;조영덕&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">        message.makeMimeFile(<span class="string">&quot;E:\\test.eml&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만들어진 eml 파일의 결과는 아래와 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">From: &lt;timpac61@gmail.com&gt;</span><br><span class="line">Subject: &#x3D;?UTF-8?B?7YWM7Iqk7Yq4IOuplOydvOyeheuLiOuLpC4&#x3D;</span><br><span class="line">?&#x3D;</span><br><span class="line">Mime-Version: 1.0</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;&quot;UTF-8&quot;</span><br><span class="line">Content-Transfer-Encoding: base64</span><br><span class="line">X-Priority: 3</span><br></pre></td></tr></table></figure><blockquote><p>Subject의 값이 ?(물음표) 앞에서 개행된 것을 확인할 수 있다. 아하~ 그래서 디코딩을 못했구만..<br>근데 어디서 바뀐거지? ㅡ.ㅡ</p></blockquote><h3 id="3-BASE64-Encoding-Test"><a href="#3-BASE64-Encoding-Test" class="headerlink" title="3. BASE64 Encoding Test"></a>3. BASE64 Encoding Test</h3><p> 메일 API lib에서 subject를 만들어주는 부분을 찾아서 테스트 코드로 만들었다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subjectEncodingTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String subject = <span class="string">&quot;테스트 메일입니다.&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = Base64.encodeBase64(subject.getBytes(<span class="string">&quot;UTF-8&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        String sTemp = <span class="keyword">new</span> String(result);</span><br><span class="line">        System.out.println(<span class="string">&quot;base64 encoding: &quot;</span> + sTemp);</span><br><span class="line">        </span><br><span class="line">        String sRet = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String[] arrResult = sTemp.split(<span class="string">&quot;\r\n&quot;</span>);        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrResult.length; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">                sRet = sRet + <span class="string">&quot;\r\n\t=?UTF-8?B?&quot;</span> + arrResult[i] + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sRet = sRet + <span class="string">&quot;=?UTF-8?B?&quot;</span> + arrResult[i] + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line">            </span><br><span class="line">        System.out.println(<span class="string">&quot;subject format : &quot;</span> + sRet);</span><br><span class="line">            </span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대충 제목을 BASE64로 인코딩한후 SMTP foramt에 맞게 만들어주는 코드다.<br>결과는 아래와 같이 나왔다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base64 encoding: 7YWM7Iqk7Yq4IOuplOydvOyeheuLiOuLpC4&#x3D;</span><br><span class="line"></span><br><span class="line">subject format: &#x3D;?UTF-8?B?7YWM7Iqk7Yq4IOuplOydvOyeheuLiOuLpC4&#x3D;</span><br><span class="line">?&#x3D;</span><br></pre></td></tr></table></figure><blockquote><p>역시나 물음표 앞이 개행됨<br>sTemp.split(“\r\n”); 구문 때문에 여기서 문제가 있을거 같다고 예상했으나… 아니였고<br>apache.commons.codec.Base64 클래스에서 인코딩 변환 중 개행문자가 붙어나왔다 Why??<br>우리의 아파치가 그럴 리 없어~ (무한신뢰)</p></blockquote><h3 id="4-Check-Library"><a href="#4-Check-Library" class="headerlink" title="4. Check Library"></a>4. Check Library</h3><p>라이브러리 버전이나 충돌이 의심되어 클래스 로드를 확인해봤다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String path = org.apache.commons.codec.binary.Base64.class.getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class="line">System.out.println(<span class="string">&quot;Base64:&quot;</span> + path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>확인결과 ~~~~~~~<br>두둥~! 아파치 Commons.codec.jar 가 아닌 다른 jar 파일을 로드하고 있는걸 확인했다.<br>결제관련 라이브러리에 포함된 Base64 클래스였다.</p></blockquote><p><img src="/images/catch.jpg" alt="잡았다 요놈"><em>잡았다 요놈~</em></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>해당 결제 라이브러리 패키지에서 apache.commons.codec을 삭제하고 리패키징한 후 배포하니 깔끔하게 해결되었다. ^^</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> 실무 </tag>
            
            <tag> SMTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Best Practices</title>
      <link href="2021/01/12/Java-Best-Practices/"/>
      <url>2021/01/12/Java-Best-Practices/</url>
      
        <content type="html"><![CDATA[<h2 id="Programing-Principles"><a href="#Programing-Principles" class="headerlink" title="Programing Principles"></a>Programing Principles</h2><ul><li>KISS - “Keep It Simple, Stupid” </li><li>DRY - “Don’t Repeat Yourself”</li><li>YAGNI - “You Ain’t Gonna Need It” - 필요할 때에 구현해라</li><li>Avoid premature optimization - 최적화는 뒤로 미뤄라</li><li>Single responsibility</li><li>Composition over Inheritance - 상속보다는 구성</li><li>Fail fast, fail hard</li></ul><h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><ol><li>technical layers package<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/project</span><br><span class="line">    ├─ controller</span><br><span class="line">    │     ├─ BoardController</span><br><span class="line">    │     ├─ UserController</span><br><span class="line">    │     ├─ ...</span><br><span class="line">    ├─ dao</span><br><span class="line">    │     ├─ BoardDao</span><br><span class="line">    │     ├─ UserDao</span><br><span class="line">    │     ├─ ...</span><br><span class="line">    ├─ service</span><br><span class="line">    │     ├─ BoardService</span><br><span class="line">    │     ├─ UserService</span><br><span class="line">    │     ├─ ...</span><br></pre></td></tr></table></figure></li><li>domain concern package<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/project</span><br><span class="line">    ├─ User</span><br><span class="line">    │     ├─ UserController</span><br><span class="line">    │     ├─ UserService</span><br><span class="line">    │     ├─ UserDao</span><br><span class="line">    ├─ Board</span><br><span class="line">    │     ├─ BoardController</span><br><span class="line">    │     ├─ BoardService</span><br><span class="line">    │     ├─ BoardDao      </span><br></pre></td></tr></table></figure><blockquote><p>개인적으로 기술적 레이어 보단 도메인 개념을 선호함<br></p></blockquote></li></ol><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><ul><li>static 클래스의 인스턴스화를 막아라 -&gt; private constructor</li><li>should be stateless, immutable, not allow subclassing, and thread-safe</li></ul><h3 id="inheritance"><a href="#inheritance" class="headerlink" title="inheritance"></a>inheritance</h3><ul><li><p>상속보다는 구성을 사용하라</p><blockquote><p>effective java의 유명한 hashset.add() 예제가 있음 ㅎㅎ<br><br>상속은 a is b 일때 타입을 강제할 때만 사용하자<br></p></blockquote></li><li><p>Do not expose protected field</p></li><li><p>class 변수에 final를 사용할 수 있다면 하는게 좋다</p></li><li><p>상속할 필요가 없는 class는 final class로 만들어라. 메서드도 마찬가지</p></li><li><p>빈 기본 생성자는 만들지마라 (자바가 알아서 만들어 줌)</p></li></ul><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><ul><li>Do not use the constant interface pattern<blockquote><p>static class를 사용하자</p></blockquote></li><li>Avoid Interface overuse<blockquote><p>확장 가능성이 없는데 interface 만들고, abstract class 만들고 구현체 만드는 것은 오버 엔지니어링</p></blockquote></li><li>interface는 최대한 작게 유지. client는 사용법만 알면됨</li></ul><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><ul><li>가능하면 base class 나 interface 대신에 type inference를 리턴하라<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends MyObject&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) factory.create(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpecialObject</span> <span class="keyword">extends</span> <span class="title">MyObject</span>&lt;<span class="title">SpecialType</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MySpecialObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(Collections.emptyList());   <span class="comment">// This is ugly, as we loose type</span></span><br><span class="line">     <span class="keyword">super</span>(Collections.EMPTY_LIST();    <span class="comment">// This is just dumb</span></span><br><span class="line">     <span class="comment">// But this is beauty</span></span><br><span class="line">     <span class="keyword">super</span>(<span class="keyword">new</span> ArrayList&lt;SpecialType&gt;());    </span><br><span class="line">     <span class="keyword">super</span>(Collections.&lt;SpecialType&gt;emptyList());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>PECS 공식 : Producer-extends, Consumer-super</li></ul><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><ul><li>복구 가능한 예외는 checked Exception을 사용</li></ul><ol><li>BAD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//handle bad string</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//business logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>GOOD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (str != <span class="keyword">null</span>) &amp;&amp; str.matches(<span class="string">&quot;-?\\d++&quot;</span>) ) &#123;</span><br><span class="line">    Integer value = Integer.valueOf(str);</span><br><span class="line">    <span class="comment">//business logic</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//handle bad string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>예외처리는 도메인 레벨에서 하자</li></ul><ol><li>BAD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ps = conn.prepareStatement(<span class="string">&quot;SELECT * from users&quot;</span>);</span><br><span class="line">          rs = ps.executeQuery();</span><br><span class="line">          <span class="comment">//... return result</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">          log.error(<span class="string">&quot;exception~&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//close resource</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>GOOD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ps = conn.prepareStatement(<span class="string">&quot;SELECT * from users&quot;</span>);</span><br><span class="line">          rs = ps.executeQuery();</span><br><span class="line">          <span class="comment">//... return result</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> DataBaseLevelExcpetion(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//close resource</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>로깅은 에러발생 시점이 아니라 예외 핸들링 시점에 해야한다</li><li>Use Standard Exception</li><li>에러 코드 리턴보다 Exception을 사용해라</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="2021/01/11/Hexo/"/>
      <url>2021/01/11/Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Quick-Start"><a href="#Hexo-Quick-Start" class="headerlink" title="Hexo Quick Start"></a>Hexo Quick Start</h1><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li><a href="http://nodejs.org/">Node.js</a></li><li><a href="http://git-scm.com/">Git</a></li><li>Create Github repository [username.github.io]</li></ul><h3 id="1-Install-Hexo"><a href="#1-Install-Hexo" class="headerlink" title="1.Install Hexo"></a>1.Install Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="2-initialize"><a href="#2-initialize" class="headerlink" title="2.initialize"></a>2.initialize</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="3-configuration-config-yml-file"><a href="#3-configuration-config-yml-file" class="headerlink" title="3.configuration _config.yml file"></a>3.configuration _config.yml file</h3><p>more info: <a href="https://hexo.io/docs/configuration">Configuration</a></p><h3 id="4-Create-a-new-post"><a href="#4-Create-a-new-post" class="headerlink" title="4.Create a new post"></a>4.Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="5-Run-server"><a href="#5-Run-server" class="headerlink" title="5.Run server"></a>5.Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ul><li>connect localhost:4000</li></ul><h3 id="6-Generate-static-files-And-Deploy-to-remote-Repository"><a href="#6-Generate-static-files-And-Deploy-to-remote-Repository" class="headerlink" title="6.Generate static files And Deploy to remote Repository"></a>6.Generate static files And Deploy to remote Repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h3><p>if ERROR Deployer not found: git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>_config.yml plugins add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">- hexo-deployer-git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Quick Start </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
