<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ForkJoin Framework in Java</title>
      <link href="2021/02/02/ForkJoin-Framework-in-Java/"/>
      <url>2021/02/02/ForkJoin-Framework-in-Java/</url>
      
        <content type="html"><![CDATA[<h2 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h2><ul><li>java.util.concurrent.ExecutorService의 구현체로 병렬 프로그래밍을 지원</li><li>Fork Join 의미<ul><li>Fork : 쓰레드를 여러개로 분할</li><li>Join : 포크해서 실행한 스레드의 결과를 취합</li><li>하나의 큰 작업을 여려개의 작업(쓰레드)으로 분할하여 실행시킨다</li></ul></li><li>주요 클래스<ul><li>ForkJoinPool : 등록된 태스크를 관리하는 쓰레드 풀</li><li>RecursiveTask - 실제 실행될 작업인 compute 메서드를 구현한다. 리턴값 있음</li><li>RecursiveAction - RecursiveTask와 같지만 리턴값이 없음</li></ul></li><li>장점 <ul><li>노는 스레드가 다른 스레드의 작업을 가져와 처리하여 효율을 증대시킨다.</li></ul></li></ul><p><img src="/images/refer/forkjointree.png" alt="ForkJoin"><em>ForkJoin 개념도</em></p><blockquote><p>하나의 작업을 분할(Fork)하고 분할된 하위 Task들의 작업이 완료될 때까지 기다린 후에 병합(Join)하여 최종 결과를 내는 방법이다.<br> 위 그림을 보면 분할 정복 알고리즘과 비슷하다. 차이점은 forkjoin은 병렬로 작업이 수행된다는 점이다. 또한 Work stealing Algorithm을 사용한다는 것.<br> 하나의 쓰레드가 작업을 다 처리하고 더 이상 할 일이 없으면 inbound-queue나 다른 쓰레드의 queue에서 할 일을 가져와서 수행하는 알고리즘이다.<br> 그리하여 CPU 유휴시간이 줄어들게된다. 직원이 노는 꼴은 못 보는 사장 마인드 ㅋㅋ</p></blockquote><p><img src="/images/workinghard.jpg" alt="일해라"><em>일해라~ CPU야</em></p><h2 id="성능테스트"><a href="#성능테스트" class="headerlink" title="성능테스트"></a>성능테스트</h2><p>다음은 ForkJoin을 이용한 숫자의 합계를 구하는 클래스다<br>RecursiveTask를 상속받아 compute() 메서드를 구현해주면된다.<br>리스트의 크기가 THRESHOLD 보다 작거나 같으면 바로 합계를 구하고 크면 재귀적으로 계속 이등 분할한 후 조인한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THRESHOLD = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">private</span> List&lt;Long&gt; data;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SumTask</span><span class="params">(List&lt;Long&gt; data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(data.size() &lt;= THRESHOLD) &#123;</span><br><span class="line"><span class="keyword">for</span>(Long number : data) &#123;</span><br><span class="line">sum += number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> mid = data.size() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">SumTask firstTask = <span class="keyword">new</span> SumTask(data.subList(<span class="number">0</span>, mid));</span><br><span class="line">SumTask secondTask = <span class="keyword">new</span> SumTask(data.subList(mid, data.size()));</span><br><span class="line">firstTask.fork();   </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> secondTask.compute() + firstTask.join(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>성능을 비교하기 위해 3가지 방식의 메서드를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//forkjoin 방식</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">testForkJoin</span><span class="params">(List&lt;Long&gt; data)</span> </span>&#123;</span><br><span class="line">  ForkJoinPool pool = ForkJoinPool.commonPool();</span><br><span class="line">  <span class="keyword">return</span> pool.invoke(<span class="keyword">new</span> SumTask(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//절차적 방식</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">testSequential</span><span class="params">(List&lt;Long&gt; data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(Long number : data) &#123;</span><br><span class="line">    sum += number;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parallel Stream 방식</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">testStream</span><span class="params">(List&lt;Long&gt; data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> data.parallelStream().reduce(<span class="number">0L</span>, Long::sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 코드는 다음과 같다. 천만개의 랜덤 숫자를 더하는 연산이다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    List&lt;Long&gt; randomData = random.longs(<span class="number">10000000</span>, <span class="number">1</span>, <span class="number">5</span>).boxed().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> sum = testForkJoin(randomData);</span><br><span class="line">    <span class="comment">//long sum = testSequential(randomData);</span></span><br><span class="line">    <span class="comment">//long sum = testStream(randomData);</span></span><br><span class="line"></span><br><span class="line">    System.out.printf(<span class="string">&quot;sum : %s, execute %s(ms)\n&quot;</span>, sum, System.currentTimeMillis() - startTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="성능테스트-결과"><a href="#성능테스트-결과" class="headerlink" title="성능테스트 결과"></a>성능테스트 결과</h2><p>포크조인 방식은 threshold에 따른 성능을 알기 위해 3가지로 나눠서 실행해봤다.<br>각각 5번씩 실행해 평균속도를 구했다.</p><table><thead><tr><th></th><th>ForkJoin<br>1000</th><th>ForkJoin<br>10000</th><th>ForkJoin<br>100000</th><th>sequential</th><th>parallelStream</th></tr></thead><tbody><tr><td>평균 실행 시간(ms)</td><td>37.4</td><td>31.8</td><td>38</td><td>96.8</td><td>140.6</td></tr></tbody></table><p>평균적으로 ForkJoin방식이 더 빠르게 나왔다.<br>하지만 작업단위의 처리량과 PC의 성능에따라 오히려 ForkJoin방식이 느려질 수도 있으니 주의해서 사용해야한다.<br>작업을 나누는 기준과 방법을 적절히 정해야 효율적인 성능이난다.</p><h2 id="언제-사용할까"><a href="#언제-사용할까" class="headerlink" title="언제 사용할까?"></a>언제 사용할까?</h2><p>단순 연산 외에도 void형인 RecursiveAction를 이용해 여러가지 작업을할 수 있을거 같다.<br>디렉토리를 재귀적으로 탐색하는 작업이나.. 루트 웹페이지부터 링크를 따라 크롤링하는 작업 등에 사용하면 좋을거란 생각이든다.<br>다음은 디렉토리의 용량을 계산하는 예제이다.<br>루트패스로부터 시작해서 해당파일이 디렉토리인지 파일인지 판단하여 디렉토리라면 작업을 분할하여 재귀처리하고, 파일이면 크기를 리턴한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDirSize</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Path path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ForkJoinDirSize</span><span class="params">(Path path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.path = path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> fileSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Files.isDirectory(path)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;Path&gt; fileList = Files.list(path).collect(Collectors.toList());</span><br><span class="line">List&lt;ForkJoinDirSize&gt; subTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Path file : fileList) &#123;</span><br><span class="line">ForkJoinDirSize subTask = <span class="keyword">new</span> ForkJoinDirSize(file);</span><br><span class="line">subTask.fork();</span><br><span class="line">subTaskList.add(subTask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Long subSize = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span>(ForkJoinDirSize subTask : subTaskList) &#123;</span><br><span class="line">subSize += subTask.join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> subSize;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileSize = Files.size(path);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fileSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Path path = Paths.get(<span class="string">&quot;C:\Program Files&quot;</span>);</span><br><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">System.out.printf(<span class="string">&quot;합계: %s\n&quot;</span>, pool.invoke(<span class="keyword">new</span> ForkJoinDirSize(path)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p>[책] Practical 모던 자바 - 장윤기</p><p><a href="https://www.pluralsight.com/guides/introduction-to-the-fork-join-framework">https://www.pluralsight.com/guides/introduction-to-the-fork-join-framework</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> ForkJoin </tag>
            
            <tag> Parallel Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>예약가능시간 조회 SQL query</title>
      <link href="2021/01/27/%EC%98%88%EC%95%BD%EA%B0%80%EB%8A%A5%EC%8B%9C%EA%B0%84-%EC%A1%B0%ED%9A%8C-SQL-query/"/>
      <url>2021/01/27/%EC%98%88%EC%95%BD%EA%B0%80%EB%8A%A5%EC%8B%9C%EA%B0%84-%EC%A1%B0%ED%9A%8C-SQL-query/</url>
      
        <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>예약 시스템 개발건이 들어와서 고객과 업무협의를 했다.<br>요구사항 중 하나가 사용자 신청화면 달력에서 신청가능한 시간이 하나라도 있으면 ‘신청가능’ 버튼을 달력에 보여주고 모두 완료되었으면 ‘예약마감’이라고 보여달라는 것이였다.<br>해당 요구 사항은 다음과 같다.</p><h2 id="요구사항"><a href="#요구사항" class="headerlink" title="요구사항"></a>요구사항</h2><ul><li>오늘기준 내일부터 15일 이후까지 신청가능(토요일, 일요일 제외)</li><li>신청가능 시간은 09:20분 ~ 17:40분 20분 단위 (09:20, 09:40, 10:00, …. 17:40)</li><li>점심시간 제외 (12:00, 12:20, 12:40)</li><li>목요일은 16:40 까지만 신청가능 (17:00, 17:20, 17:40 제외)</li><li>관리자가 추가로 특정 신청 시간을 비활성화할 수 있음</li><li>신청 시간당 한명만 신청가능</li></ul><h2 id="분석"><a href="#분석" class="headerlink" title="분석"></a>분석</h2><p>20분 단위 신청가능 시간은 변동될 일이 없다고했고 시간을 관리자가 따로 입력하지않기 때문에<br>신청가능 시간을 디폴트로 생성하고 추가로 비활성화한 시간만 막는 방식으로 개발하기로했다.<br>그리고 달력에 ‘신청가능’ or ‘예약마감’ 을 표시하기위해 어떻게 해야할까 깊은 고민에 빠지게됐다</p><p><img src="/images/gorapaduck.jpg" alt="고민"><em>점심시간이랑… 목요일이 어쩌구.. 관리자가 추가를…</em></p><h2 id="개발"><a href="#개발" class="headerlink" title="개발"></a>개발</h2><ul><li>고민 끝에 날짜별로 신청가능한 시간만 DB query로 가져오기로 정했다. </li></ul><p>먼저 기본 신청가능 시간테이블(BASE_TIME)과 관리자 비활성 시간을 담는 테이블(BLOCK_DATE)을 만든다.<br>DBMS는 Oracle이다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BLOCK_DATE (</span><br><span class="line">    &quot;BLOCKDATE&quot; VARCHAR2(<span class="number">8</span> BYTE), </span><br><span class="line">    &quot;BLOCKTIME&quot; VARCHAR2(<span class="number">5</span> BYTE)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BASE_TIME (&quot;BASETIME&quot; VARCHAR2(<span class="number">5</span> BYTE) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ENABLE);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASETIME <span class="keyword">VALUES</span> (<span class="string">&#x27;09:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASETIME <span class="keyword">VALUES</span> (<span class="string">&#x27;09:40&#x27;</span>);</span><br><span class="line"><span class="operator">~</span><span class="operator">~</span><span class="operator">~</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BASETIME <span class="keyword">VALUES</span> (<span class="string">&#x27;17:40&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>계층쿼리를 이용해 15일간의 날짜 테이블을 만든다. 목요일 조건을 검색하기위해 요일정보도 같이 셀렉트했다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_CHAR(FIRST_DAY<span class="operator">+</span>LEVEL,<span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="keyword">AS</span> DATES, TO_CHAR(FIRST_DAY<span class="operator">+</span>LEVEL,<span class="string">&#x27;D&#x27;</span>) <span class="keyword">AS</span> DY </span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> to_date(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) FIRST_DAY <span class="keyword">FROM</span> DUAL) </span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> FIRST_DAY<span class="operator">+</span>LEVEL <span class="operator">&lt;=</span> FIRST_DAY <span class="operator">+</span> <span class="number">15</span> </span><br></pre></td></tr></table></figure><p>?에 바인딩되는 값은 오늘 날짜다(YYYYMMDD)<br>‘20210122’를 넣으면 아래와 같이 결과가 나온다.</p><table><thead><tr><th align="center">DATES</th><th>DY</th></tr></thead><tbody><tr><td align="center">20210123</td><td>7</td></tr><tr><td align="center">20210124</td><td>1</td></tr><tr><td align="center">20210125</td><td>2</td></tr><tr><td align="center">…</td><td>…</td></tr><tr><td align="center">20210206</td><td>7</td></tr></tbody></table><p>날짜 테이블과 기본시간 테이블을 조인하고 점심시간과, 토,일요일 제외하고, 목요일 조건도 빼주자.<br>위에서 만든 날짜와 시간 테이블을 with절로 정의해서 조인했다.<br>그다음 신청테이블에서 이미 신청된 시간과 관리자가 비활성화한 시간을 가져와서 제외시키면된다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> BASEDATE <span class="keyword">AS</span> ( </span><br><span class="line">    <span class="keyword">SELECT</span> TO_CHAR(FIRST_DAY<span class="operator">+</span>LEVEL,<span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="keyword">AS</span> DATES, TO_CHAR(FIRST_DAY<span class="operator">+</span>LEVEL,<span class="string">&#x27;D&#x27;</span>) <span class="keyword">AS</span> DY </span><br><span class="line">    <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> to_date(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) FIRST_DAY <span class="keyword">FROM</span> DUAL) </span><br><span class="line">    <span class="keyword">CONNECT</span> <span class="keyword">BY</span> FIRST_DAY<span class="operator">+</span>LEVEL <span class="operator">&lt;=</span> FIRST_DAY <span class="operator">+</span> <span class="number">15</span> </span><br><span class="line">), </span><br><span class="line">AVAILABLE_TIME <span class="keyword">AS</span> ( </span><br><span class="line">    <span class="keyword">SELECT</span> DATES, BASETIME <span class="keyword">AS</span> TIMES  </span><br><span class="line">    <span class="keyword">FROM</span> BASEDATE, BASE_TIME </span><br><span class="line">    <span class="keyword">WHERE</span> DY <span class="operator">!=</span> <span class="number">1</span> <span class="keyword">AND</span> DY <span class="operator">!=</span> <span class="number">7</span> <span class="keyword">AND</span> DY <span class="operator">!=</span> <span class="number">5</span> <span class="keyword">OR</span> (DY <span class="operator">=</span> <span class="number">5</span> <span class="keyword">and</span> BASETIME <span class="keyword">NOT</span> <span class="keyword">IN</span> (?))</span><br><span class="line">), </span><br><span class="line">BLOCK_TIME <span class="keyword">AS</span> ( </span><br><span class="line">    <span class="keyword">SELECT</span> reservation_date <span class="keyword">AS</span> DATES, reservation_time <span class="keyword">AS</span> TIMES <span class="keyword">FROM</span> 신청테이블  </span><br><span class="line">    <span class="keyword">WHERE</span> reservation_date <span class="keyword">BETWEEN</span> TO_DATE(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AND</span> TO_DATE(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="operator">+</span> <span class="number">15</span> </span><br><span class="line">    <span class="keyword">UNION</span> </span><br><span class="line">    <span class="keyword">SELECT</span> blockdate <span class="keyword">AS</span> DATES, blocktime <span class="keyword">AS</span> TIMES <span class="keyword">FROM</span> BLOCK_DATE </span><br><span class="line">    <span class="keyword">WHERE</span>  blockdate <span class="keyword">BETWEEN</span> TO_DATE(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AND</span> TO_DATE(?, <span class="string">&#x27;YYYYMMDD&#x27;</span>) <span class="operator">+</span> <span class="number">15</span> </span><br><span class="line">) </span><br><span class="line">        </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> AVAILABLE_TIME  </span><br><span class="line">MINUS  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> BLOCK_TIME</span><br></pre></td></tr></table></figure><ul><li>AVAILABLE_TIME의 WHERE절</li></ul><p>DY != 1 AND DY != 7 – 토요일, 일요일은 제외</p><p>DY != 5 OR (DY = 5 and BASETIME NOT IN (?))  – 목요일인 경우 추가시간 제외</p><p>? 에 바인딩되는 목요일 제외시간은 Java Class에 정의했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlocktimeUtil</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; THURSDAY_BLOCK_TIME = Arrays.asList(<span class="string">&quot;17:00&quot;</span>, <span class="string">&quot;17:20&quot;</span>, <span class="string">&quot;17:40&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getThursDayBlockTimeStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> THURSDAY_BLOCK_TIME.stream().map(s -&gt; <span class="string">&quot;&#x27;&quot;</span> +s+ <span class="string">&quot;&#x27;&quot;</span>).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과는….?? SUCCESS ㅎㅎㅎ</p><table><thead><tr><th align="center">DATE</th><th align="center">TIMES</th></tr></thead><tbody><tr><td align="center">20210123</td><td align="center">09:20</td></tr><tr><td align="center">20210123</td><td align="center">09:40</td></tr><tr><td align="center">20210125</td><td align="center">14:20</td></tr><tr><td align="center">20210125</td><td align="center">14:40</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 실무 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transaction Isolation Levels in Oracle</title>
      <link href="2021/01/15/Transaction-Isolation-Levels/"/>
      <url>2021/01/15/Transaction-Isolation-Levels/</url>
      
        <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p> 개발을 하다보면 동시성과 일관성에 대해서 한번쯤 생각하게된다.<br> 동시성을 높이면 일관성이 떨어지고, 일관성을 높이면 동시성이 떨어진다.. 그러면 어느정도의 레벨로 맞춰야할까 언제 동시성을 높이고 언제 일관성을 높여야 할까??<br> 이런생각 중에 오라클에서는 동시성 제어와 읽기 일관성을 유지를 어떻게 하는지 궁금해져서 오라클 문서와 블로그등을 참고해서 정리해보았다<br> 동작원리를 이해하기 위해선 먼저 Transaction Isolation Levels을 알아야한다.</p><h2 id="Transaction-Isolation-Levels"><a href="#Transaction-Isolation-Levels" class="headerlink" title="Transaction Isolation Levels"></a>Transaction Isolation Levels</h2><p>ANSI/ISO 표준에서 Transaction Isolation Levels을 다음 4가지로 정의하고있다.</p><ul><li>READ UNCOMMITTED</li><li>READ COMMITTED</li><li>REPEATABLE READ</li><li>SERIALIZABLE</li></ul><h3 id="1-READ-UNCOMMITTED"><a href="#1-READ-UNCOMMITTED" class="headerlink" title="1. READ UNCOMMITTED"></a>1. READ UNCOMMITTED</h3><p> 다른 트랜잭션의 변경내용이 커밋하지 않아도 보여진다.<br> 예를 들어 다음과 같은 Account 테이블이 있다고 가정하자</p><table><thead><tr><th>row</th><th>id</th><th>balance</th></tr></thead><tbody><tr><td>1</td><td>123</td><td>10000</td></tr><tr><td>2</td><td>222</td><td>30000</td></tr><tr><td>3</td><td>333</td><td>50000</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><p><em>[table1. Account 테이블]</em></p><p>그리고 다음과 같은 시나리오를 생각해보자.</p><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">select balance from Account where id = ‘123’</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">update Account set balance = balance + 10000 where id = ‘123’</td></tr><tr><td>T3</td><td align="center">select balance from Account where id = ‘123’</td><td align="center">-</td></tr><tr><td>T4</td><td align="center">-</td><td align="center">commit;</td></tr></tbody></table><p><em>[table2. 트랜잭션 시나리오 1]</em></p><p>A 트랜잭션이 실행되는 중간에 다른 세션에서 update를 하고 커밋을 하지 않았다.<br>transaction A의 T1에서 조회한 값과 T3에서 조회한 balance값은 어떻게 나올까?<br>결과는 T1 = 10000, T3 = 20000 이다.<br>이렇게 실시간으로 다른 트랜잭션의 커밋되지않은 변경이 보여지는 현상을 <strong>Dirty read</strong>라고 한다.<br>동시성이 좋지만 일관성을 전혀 보장하지 못한다.</p><h3 id="2-READ-COMMITTED"><a href="#2-READ-COMMITTED" class="headerlink" title="2. READ COMMITTED"></a>2. READ COMMITTED</h3><p>다른 트랜잭션의 변경내용이 커밋되어야 보여진다.<br>READ COMMITTED 레벨에서 [table2. 트랜잭션 시나리오 1]이 시행되면 똑같은 T1 = 10000, T3 = 10000 값을 얻을 수있다. 커밋을 하지 않았기 때문이다.<br>하지만 B 트랜잭션에서 커밋을하게되면 역시 바뀐값을 읽게된다.<br>이러한 현상을 <strong>Nonrepeatable read</strong>라한다. 하나의 트랜잭션안에서는 같은 쿼리를 수행했을 때 항상 같은 값을 가져야한다는 read consistent에 부합되는 현상이다.</p><h3 id="3-REPEATABLE-READ"><a href="#3-REPEATABLE-READ" class="headerlink" title="3. REPEATABLE READ"></a>3. REPEATABLE READ</h3><p>REPEATABLE READ 레벨에선 Dirty read와 Nonrepeatable read가 없다.<br>커밋을해도 T1,T3결과가 모두 10000으로 조회되어 read consistent를 보장한다.<br>하지만 <strong>Phantom READ</strong>를 허용한다. Phantom READ의 예제 시나리오는 다음과 같다.</p><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">select count(*) from Account</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">insert into Account values (4, 1000) <br>commit;</td></tr><tr><td>T3</td><td align="center">select count(*) from Account</td><td align="center">-</td></tr></tbody></table><p><em>[table3. 트랜잭션 시나리오 2]</em></p><p>T1에서의 결과보다 T3의 조회한 카운트가 하나더 증가해서 나온다. 이런현상을 <strong>Phantom READ</strong>라한다</p><blockquote><p>유령(Phantom)이 나타났다 ㄷㄷㄷ</p></blockquote><h3 id="4-SERIALIZABLE"><a href="#4-SERIALIZABLE" class="headerlink" title="4. SERIALIZABLE"></a>4. SERIALIZABLE</h3><p>가장 강한 격리 레벨로 정합성을 보장하지만 하나의 트랜잭션의 끝날때까지 다른트랜잭션이 접근을 못해서 성능 저하가 발생할 수 있다. Dead Lock 가능성도 있음</p><p>다음은 isolation levels permit 요약표다</p><table><thead><tr><th>Isolation Level</th><th align="center">Dirty Read</th><th align="center">Nonrepeatable Read</th><th align="center">Phantom Read</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td align="center">Permitted</td><td align="center">Permitted</td><td align="center">Permitted</td></tr><tr><td>READ COMMITTED</td><td align="center">–</td><td align="center">Permitted</td><td align="center">Permitted</td></tr><tr><td>REPEATABLE READ</td><td align="center">–</td><td align="center">–</td><td align="center">Permitted</td></tr><tr><td>SERIALIZABLE</td><td align="center">–</td><td align="center">–</td><td align="center">–</td></tr></tbody></table><p><em>[table4. isolation levels]</em></p><h2 id="Data-Concurrency-and-Consistency-in-Oracle"><a href="#Data-Concurrency-and-Consistency-in-Oracle" class="headerlink" title="Data Concurrency and Consistency in Oracle"></a>Data Concurrency and Consistency in Oracle</h2><p>그렇다면 오라클 DBMS에서는 어떤 트랜잭션 격리 레벨을 사용하고 있으며 어떻게 데이터 동시성과 일관성을 보장할까?<br>오라클은 기본적으로 READ COMMITTED 레벨로 설정되어있으며, 동시성 제어를 위해 MVCC매커니즘을 사용하고있다.</p><p>[table2. 트랜잭션 시나리오 1]을 다시보고 오라클 기본설정인 READ COMMITTED에서는 어떻게 동작할 지 생각해보자.<br>일단 MVCC가 뭔지 모르니 MVCC를 사용하지 않는 DBMS와 어떻게 다르게 동작하는지 알아보자</p><ol><li>일반적인 Lock을 사용한 제어에서 [table2. 트랜잭션 시나리오 1]</li></ol><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">balance = 10000을 읽음</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">row 하나를 업데이트를 하고 exclusive lock을 건다</td></tr><tr><td>T3</td><td align="center">exclusive lock이 걸려있어서 block되고 wait함<br>B transaction이 끝나면 balance = 20000을 읽음</td><td align="center">-</td></tr><tr><td>T4</td><td align="center">-</td><td align="center">commit;</td></tr></tbody></table><p>B에서 update한 순간 lock이걸리고 exclusive lock이기 때문에 T3시간에서는 접근을 못한다.<br>B에서 commit을 하면 lock이 풀리고 그후에 row를 읽어온다.</p><ol start="2"><li>MVCC를 사용한 제어에서 [table2. 트랜잭션 시나리오 1]</li></ol><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">해당 로우를 포함한 블록을 복사해서 따로 저장해놓는다<br>balance = 10000을 읽음</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">row 하나를 업데이트를 하고 exclusive lock을 건다</td></tr><tr><td>T3</td><td align="center">복사한 버전에서 balance = 10000을 읽음</td><td align="center">-</td></tr><tr><td>T4</td><td align="center">-</td><td align="center">commit;</td></tr></tbody></table><p>T1에서 A는 쿼리가 시작하는 시점에서 해당 row를 포함한 블록을 새로 만들어 임시 저장해놓는다. 일종의 snapshot이다<br>그리고 트랜잭션이 끝날때까지 그것만 읽게된다.<br>T2에서 B가 update문을 실행하면서 exclusive lock이 걸리지만 T3에서 A는 복사된 블록을 읽기때문에 B가 완료되지 않아도 접근이 가능한 것이다. T4에서 B가 commit하면 업데이트된 값으로 새로운 버전의 블록을 생성한다.<br>이렇게 하나의 데이터에 대해 여러 버전의 데이터가 존재하는 구조로 만드는 방식을 MVCC(Multi-Version Concurrency Control)라고한다.</p><blockquote><p>너무 어렵다…ㅠㅠ 이해를 돕기위해 예시를 들어보자</p></blockquote><table><thead><tr><th>time</th><th align="center">transaction A</th><th align="center">transaction B</th></tr></thead><tbody><tr><td>T1</td><td align="center">select balance from account where id=’123’</td><td align="center">-</td></tr><tr><td>T2</td><td align="center">-</td><td align="center">update account set balance=balance+20000 where id=’123’</td></tr><tr><td>T3</td><td align="center">update account set balance=balance+10000 where id=’123’</td><td align="center">-</td></tr><tr><td>T4</td><td align="center">-</td><td align="center">commit;</td></tr><tr><td>T5</td><td align="center">commit;</td><td align="center">-</td></tr></tbody></table><p><em>[table5. 트랜잭션 시나리오 3]</em></p><blockquote><p>이쯤에서 퀴즈~~ ^^ 위의 시나리오에서 최종 업데이트된 balance 값은??</p></blockquote><p><img src="/images/gorapaduck.jpg" alt="혼란"><em>20000? 30000?? 40000???</em></p><p>차례대로 천천히 살펴보자<br>T1 - 트랜잭션이 시작되고 CR Block(복사본)을 만든다<br>T2 - id=’123’ row를 업데이트하고 exclusive lock을건다<br>T3 - update문은 read component(where절) + write component(set절)로 나뉘는데..<br>    read는 CR Block에서 가져오기때문에 처음 시작 때 id=’123’을 선택한다. 하지만 update set절은 write이기 때문에 exclusive lock에 걸리게된다..<br>    간단히 말해 DML은 MVCC적용이 안된다. 고로 대기상태가 됨<br>T4 - B가 커밋 후에 A는 update를 수행한다. 이 때 balance+10000의 balance는 업데이트된 멀티비전을 읽으므로 30000 + 10000 결과는 40000이된다.</p><h3 id="READ-ONLY"><a href="#READ-ONLY" class="headerlink" title="READ ONLY"></a>READ ONLY</h3><p>오라클에는 추가적인 transaction isolation level인 READ ONLY를 제공한다.<br>일관성이 더 높은 레벨이다. ANSI표준으로 치면 REPEATABLE READ와 같고, SERIALIZABLE에서 수정만 금지한 레벨이다<br>예약시스템같은 엄격하게 동시성을 제어하고 싶을 때 사용할 수 있겠다. statement에서 사용하려면 select … for update 구문으로 쓰면된다.</p><h2 id="3줄요약"><a href="#3줄요약" class="headerlink" title="3줄요약"></a>3줄요약</h2><ul><li>ANSI/ISO Standard Transaction Isolation Levels은 4가지가 있다 (READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE)</li><li>오라클은 read는 MVCC, write는 Lock으로 제어하여 READ COMMITTED Level을 구현한다</li><li>READ ONLY, SERIALIZABLE은 신중히 사용하자</li></ul><p><img src="/images/understand.jpg" alt="이해했어"></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://docs.oracle.com/cd/B10501_01/server.920/a96524/c21cnsis.htm">https://docs.oracle.com/cd/B10501_01/server.920/a96524/c21cnsis.htm</a></li><li><a href="https://blogs.oracle.com/oraclemagazine/on-transaction-isolation-levels">https://blogs.oracle.com/oraclemagazine/on-transaction-isolation-levels</a></li><li><a href="http://wiki.gurubee.net/pages/viewpage.action?pageId=27428238">http://wiki.gurubee.net/pages/viewpage.action?pageId=27428238</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> Reference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMTP 제목 인코딩 오류 Troubleshooting</title>
      <link href="2021/01/13/SMTP-%EC%A0%9C%EB%AA%A9-%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%98%A4%EB%A5%98-Troubleshooting/"/>
      <url>2021/01/13/SMTP-%EC%A0%9C%EB%AA%A9-%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%98%A4%EB%A5%98-Troubleshooting/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><ul><li>유지보수하는 어플리케이션에서 메일서버 API를 사용하고 있었는데 어느날부터 메일 제목이 깨져서 발송되는 문제가 발생했다.<br>이리저리 삽질 끝에 문제를 해결했는데 도움이 될까 남겨본다.</li></ul><h2 id="분석"><a href="#분석" class="headerlink" title="분석"></a>분석</h2><h3 id="1-SMTP-FORMAT"><a href="#1-SMTP-FORMAT" class="headerlink" title="1. SMTP FORMAT"></a>1. SMTP FORMAT</h3><p> 발송된 메일의 제목을 확인해보니 아래와 같이 나왔다<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;?UTF-8?B?7TAGM6Iqk5Yq2OSDHsydvOyeheuLuhC4&#x3D;</span><br></pre></td></tr></table></figure><br>SMTP의 subject format은 다음과 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;?[charset]?[인코딩타입]?[인코딩된 제목]?&#x3D;</span><br></pre></td></tr></table></figure><blockquote><p>왜 디코딩이 안됐을까… 하고 한참 보다가 뒤에 물음표 빠진것 발견 ^^</p></blockquote><h3 id="2-eml-Test"><a href="#2-eml-Test" class="headerlink" title="2. eml Test"></a>2. eml Test</h3><p>왜 빠진걸까?<br><br>일단 eml 파일을 만들어 테스트 해봤다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ImMessage message = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        Session session = Session.getDefaultInstance(props); </span><br><span class="line">        message = <span class="keyword">new</span> ImMessage( session );</span><br><span class="line">        message.setCharset(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        message.setFrom(<span class="string">&quot;&quot;</span>, <span class="string">&quot;timpac61@gmail.com&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        message.setSubjectEncode(<span class="string">&quot;테스트 메일입니다.&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        message.setPriority(<span class="number">3</span>);</span><br><span class="line">        message.setHtml(<span class="string">&quot;테스트&quot;</span>);</span><br><span class="line">        message.setRecipientsEx(javax.mail.Message.RecipientType.TO, <span class="string">&quot;조영덕&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">        message.makeMimeFile(<span class="string">&quot;E:\\test.eml&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만들어진 eml 파일의 결과는 아래와 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">From: &lt;timpac61@gmail.com&gt;</span><br><span class="line">Subject: &#x3D;?UTF-8?B?7YWM7Iqk7Yq4IOuplOydvOyeheuLiOuLpC4&#x3D;</span><br><span class="line">?&#x3D;</span><br><span class="line">Mime-Version: 1.0</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;&quot;UTF-8&quot;</span><br><span class="line">Content-Transfer-Encoding: base64</span><br><span class="line">X-Priority: 3</span><br></pre></td></tr></table></figure><blockquote><p>Subject의 값이 ?(물음표) 앞에서 개행된 것을 확인할 수 있다. 아하~ 그래서 디코딩을 못했구만..<br>근데 어디서 바뀐거지? ㅡ.ㅡ</p></blockquote><h3 id="3-BASE64-Encoding-Test"><a href="#3-BASE64-Encoding-Test" class="headerlink" title="3. BASE64 Encoding Test"></a>3. BASE64 Encoding Test</h3><p> 메일 API lib에서 subject를 만들어주는 부분을 찾아서 테스트 코드로 만들었다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subjectEncodingTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String subject = <span class="string">&quot;테스트 메일입니다.&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = Base64.encodeBase64(subject.getBytes(<span class="string">&quot;UTF-8&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        String sTemp = <span class="keyword">new</span> String(result);</span><br><span class="line">        System.out.println(<span class="string">&quot;base64 encoding: &quot;</span> + sTemp);</span><br><span class="line">        </span><br><span class="line">        String sRet = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String[] arrResult = sTemp.split(<span class="string">&quot;\r\n&quot;</span>);        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrResult.length; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">                sRet = sRet + <span class="string">&quot;\r\n\t=?UTF-8?B?&quot;</span> + arrResult[i] + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sRet = sRet + <span class="string">&quot;=?UTF-8?B?&quot;</span> + arrResult[i] + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line">            </span><br><span class="line">        System.out.println(<span class="string">&quot;subject format : &quot;</span> + sRet);</span><br><span class="line">            </span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대충 제목을 BASE64로 인코딩한후 SMTP foramt에 맞게 만들어주는 코드다.<br>결과는 아래와 같이 나왔다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base64 encoding: 7YWM7Iqk7Yq4IOuplOydvOyeheuLiOuLpC4&#x3D;</span><br><span class="line"></span><br><span class="line">subject format: &#x3D;?UTF-8?B?7YWM7Iqk7Yq4IOuplOydvOyeheuLiOuLpC4&#x3D;</span><br><span class="line">?&#x3D;</span><br></pre></td></tr></table></figure><blockquote><p>역시나 물음표 앞이 개행됨<br>sTemp.split(“\r\n”); 구문 때문에 여기서 문제가 있을거 같다고 예상했으나… 아니였고<br>apache.commons.codec.Base64 클래스에서 인코딩 변환 중 개행문자가 붙어나왔다 Why??<br>우리의 아파치가 그럴 리 없어~ (무한신뢰)</p></blockquote><h3 id="4-Check-Library"><a href="#4-Check-Library" class="headerlink" title="4. Check Library"></a>4. Check Library</h3><p>라이브러리 버전이나 충돌이 의심되어 클래스 로드를 확인해봤다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String path = org.apache.commons.codec.binary.Base64.class.getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class="line">System.out.println(<span class="string">&quot;Base64:&quot;</span> + path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>확인결과 ~~~~~~~<br>두둥~! 아파치 Commons.codec.jar 가 아닌 다른 jar 파일을 로드하고 있는걸 확인했다.<br>결제관련 라이브러리에 포함된 Base64 클래스였다.</p></blockquote><p><img src="/images/catch.jpg" alt="잡았다 요놈"><em>잡았다 요놈~</em></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>해당 결제 라이브러리 패키지에서 apache.commons.codec을 삭제하고 리패키징한 후 배포하니 깔끔하게 해결되었다. ^^</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> SMTP </tag>
            
            <tag> 실무 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Best Practices</title>
      <link href="2021/01/12/Java-Best-Practices/"/>
      <url>2021/01/12/Java-Best-Practices/</url>
      
        <content type="html"><![CDATA[<h2 id="Programing-Principles"><a href="#Programing-Principles" class="headerlink" title="Programing Principles"></a>Programing Principles</h2><ul><li>KISS - “Keep It Simple, Stupid” </li><li>DRY - “Don’t Repeat Yourself”</li><li>YAGNI - “You Ain’t Gonna Need It” - 필요할 때에 구현해라</li><li>Avoid premature optimization - 최적화는 뒤로 미뤄라</li><li>Single responsibility</li><li>Composition over Inheritance - 상속보다는 구성</li><li>Fail fast, fail hard</li></ul><h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><ol><li>technical layers package<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/project</span><br><span class="line">    ├─ controller</span><br><span class="line">    │     ├─ BoardController</span><br><span class="line">    │     ├─ UserController</span><br><span class="line">    │     ├─ ...</span><br><span class="line">    ├─ dao</span><br><span class="line">    │     ├─ BoardDao</span><br><span class="line">    │     ├─ UserDao</span><br><span class="line">    │     ├─ ...</span><br><span class="line">    ├─ service</span><br><span class="line">    │     ├─ BoardService</span><br><span class="line">    │     ├─ UserService</span><br><span class="line">    │     ├─ ...</span><br></pre></td></tr></table></figure></li><li>domain concern package<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/project</span><br><span class="line">    ├─ User</span><br><span class="line">    │     ├─ UserController</span><br><span class="line">    │     ├─ UserService</span><br><span class="line">    │     ├─ UserDao</span><br><span class="line">    ├─ Board</span><br><span class="line">    │     ├─ BoardController</span><br><span class="line">    │     ├─ BoardService</span><br><span class="line">    │     ├─ BoardDao      </span><br></pre></td></tr></table></figure><blockquote><p>개인적으로 기술적 레이어 보단 도메인 개념을 선호함<br></p></blockquote></li></ol><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><ul><li>static 클래스의 인스턴스화를 막아라 -&gt; private constructor</li><li>should be stateless, immutable, not allow subclassing, and thread-safe</li></ul><h3 id="inheritance"><a href="#inheritance" class="headerlink" title="inheritance"></a>inheritance</h3><ul><li><p>상속보다는 구성을 사용하라</p><blockquote><p>effective java의 유명한 hashset.add() 예제가 있음 ㅎㅎ<br><br>상속은 a is b 일때 타입을 강제할 때만 사용하자<br></p></blockquote></li><li><p>Do not expose protected field</p></li><li><p>class 변수에 final를 사용할 수 있다면 하는게 좋다</p></li><li><p>상속할 필요가 없는 class는 final class로 만들어라. 메서드도 마찬가지</p></li><li><p>빈 기본 생성자는 만들지마라 (자바가 알아서 만들어 줌)</p></li></ul><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><ul><li>Do not use the constant interface pattern<blockquote><p>static class를 사용하자</p></blockquote></li><li>Avoid Interface overuse<blockquote><p>확장 가능성이 없는데 interface 만들고, abstract class 만들고 구현체 만드는 것은 오버 엔지니어링</p></blockquote></li><li>interface는 최대한 작게 유지. client는 사용법만 알면됨</li></ul><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><ul><li>가능하면 base class 나 interface 대신에 type inference를 리턴하라<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends MyObject&gt; <span class="function">T <span class="title">getObject</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) factory.create(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpecialObject</span> <span class="keyword">extends</span> <span class="title">MyObject</span>&lt;<span class="title">SpecialType</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MySpecialObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(Collections.emptyList());   <span class="comment">// This is ugly, as we loose type</span></span><br><span class="line">     <span class="keyword">super</span>(Collections.EMPTY_LIST();    <span class="comment">// This is just dumb</span></span><br><span class="line">     <span class="comment">// But this is beauty</span></span><br><span class="line">     <span class="keyword">super</span>(<span class="keyword">new</span> ArrayList&lt;SpecialType&gt;());    </span><br><span class="line">     <span class="keyword">super</span>(Collections.&lt;SpecialType&gt;emptyList());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>PECS 공식 : Producer-extends, Consumer-super</li></ul><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><ul><li>복구 가능한 예외는 checked Exception을 사용</li></ul><ol><li>BAD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//handle bad string</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//business logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>GOOD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (str != <span class="keyword">null</span>) &amp;&amp; str.matches(<span class="string">&quot;-?\\d++&quot;</span>) ) &#123;</span><br><span class="line">    Integer value = Integer.valueOf(str);</span><br><span class="line">    <span class="comment">//business logic</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//handle bad string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>예외처리는 도메인 레벨에서 하자</li></ul><ol><li>BAD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ps = conn.prepareStatement(<span class="string">&quot;SELECT * from users&quot;</span>);</span><br><span class="line">          rs = ps.executeQuery();</span><br><span class="line">          <span class="comment">//... return result</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">          log.error(<span class="string">&quot;exception~&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//close resource</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>GOOD<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ps = conn.prepareStatement(<span class="string">&quot;SELECT * from users&quot;</span>);</span><br><span class="line">          rs = ps.executeQuery();</span><br><span class="line">          <span class="comment">//... return result</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> DataBaseLevelExcpetion(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//close resource</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>로깅은 에러발생 시점이 아니라 예외 핸들링 시점에 해야한다</li><li>Use Standard Exception</li><li>에러 코드 리턴보다 Exception을 사용해라</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="2021/01/11/Hexo/"/>
      <url>2021/01/11/Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Quick-Start"><a href="#Hexo-Quick-Start" class="headerlink" title="Hexo Quick Start"></a>Hexo Quick Start</h1><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li><a href="http://nodejs.org/">Node.js</a></li><li><a href="http://git-scm.com/">Git</a></li><li>Create Github repository [username.github.io]</li></ul><h3 id="1-Install-Hexo"><a href="#1-Install-Hexo" class="headerlink" title="1.Install Hexo"></a>1.Install Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="2-initialize"><a href="#2-initialize" class="headerlink" title="2.initialize"></a>2.initialize</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="3-configuration-config-yml-file"><a href="#3-configuration-config-yml-file" class="headerlink" title="3.configuration _config.yml file"></a>3.configuration _config.yml file</h3><p>more info: <a href="https://hexo.io/docs/configuration">Configuration</a></p><h3 id="4-Create-a-new-post"><a href="#4-Create-a-new-post" class="headerlink" title="4.Create a new post"></a>4.Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="5-Run-server"><a href="#5-Run-server" class="headerlink" title="5.Run server"></a>5.Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ul><li>connect localhost:4000</li></ul><h3 id="6-Generate-static-files-And-Deploy-to-remote-Repository"><a href="#6-Generate-static-files-And-Deploy-to-remote-Repository" class="headerlink" title="6.Generate static files And Deploy to remote Repository"></a>6.Generate static files And Deploy to remote Repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h3><p>if ERROR Deployer not found: git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>_config.yml plugins add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">- hexo-deployer-git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Quick Start </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
